[{"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/index.tsx":"1","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/serviceWorker.ts":"2","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/App.tsx":"3","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/Dashboard.tsx":"4","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/CreateNewBooking.tsx":"5","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/ServiceCounter.tsx":"6","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/Appointments.tsx":"7","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/Home.tsx":"8","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/displayBookingForm.tsx":"9","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/DashboardHPB.tsx":"10","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/DashboardHospital.tsx":"11","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/service/base.service.tsx":"12","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/models/booking.tsx":"13","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/models/doc-elements.tsx":"14","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/bookingsForm.tsx":"15","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/models/response.tsx":"16","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/common/components/form/index.ts":"17","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/common/components/form/input.tsx":"18","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/common/components/form/button.tsx":"19","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/common/components/form/dateinput.tsx":"20"},{"size":344,"mtime":1650176851993,"results":"21","hashOfConfig":"22"},{"size":5201,"mtime":1650176851994,"results":"23","hashOfConfig":"22"},{"size":4478,"mtime":1650176851988,"results":"24","hashOfConfig":"22"},{"size":2596,"mtime":1650176851993,"results":"25","hashOfConfig":"22"},{"size":3305,"mtime":1650176851992,"results":"26","hashOfConfig":"22"},{"size":37572,"mtime":1650176851993,"results":"27","hashOfConfig":"22"},{"size":66631,"mtime":1650177889374,"results":"28","hashOfConfig":"22"},{"size":1518,"mtime":1650176851993,"results":"29","hashOfConfig":"22"},{"size":491,"mtime":1650176851993,"results":"30","hashOfConfig":"22"},{"size":9200,"mtime":1650176851993,"results":"31","hashOfConfig":"22"},{"size":12615,"mtime":1650176851993,"results":"32","hashOfConfig":"22"},{"size":3765,"mtime":1650176851994,"results":"33","hashOfConfig":"22"},{"size":1785,"mtime":1650176851993,"results":"34","hashOfConfig":"22"},{"size":393,"mtime":1650176851993,"results":"35","hashOfConfig":"22"},{"size":8252,"mtime":1650176851993,"results":"36","hashOfConfig":"22"},{"size":351,"mtime":1650176851993,"results":"37","hashOfConfig":"22"},{"size":80,"mtime":1650176851992,"results":"38","hashOfConfig":"22"},{"size":1211,"mtime":1650176851992,"results":"39","hashOfConfig":"22"},{"size":402,"mtime":1650176851992,"results":"40","hashOfConfig":"22"},{"size":787,"mtime":1650176851992,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pljplk",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":57,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/index.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/serviceWorker.ts",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/App.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/Dashboard.tsx",["103"],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/CreateNewBooking.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/ServiceCounter.tsx",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132"],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/Appointments.tsx",["133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],[],"import React from 'react';\nimport '../App.css';\nimport { Text, Button, Layout, BoxContainer, Breadcrumb, InputGroup, Accordion, InputSelect, Modal, RadioButton, LinkList, } from 'react-lifesg-design-system';\nimport styled from \"styled-components\";\nimport Booking from \"../models/booking\";\n\n\nimport { Container, Label, ModalContent, OptionContainer } from \"../models/doc-elements\";\nimport BaseService from '../service/base.service';\n\n\nconst StyledContainer = styled(Layout.GridContainer)`\n    grid-template-rows: 1fr;\n    grid-template-columns: 12fr;\n    grid-template-areas:\n        \"title\"\n        \"button \"\n        \"queue\";\n    grid-gap: 0.25rem;\n    grid-row-gap: 16px;\n`;\n\nconst StyledSection = styled(Layout.Section)`\n    margin-top: 8%;\n    min-height: 600px;\n`;\n\nconst Main = styled.main`\n  color: white;\n  grid-area: queue;\n  padding: 0.25rem;\n`;\n\ninterface MyState {\n    bookings: Booking[],\n    // booking: Booking,    \n    inputValue: string,\n    clicked: string,\n    showModal: boolean,\n    showNRIC: string,\n    showGeneralPractioner: string,\n    showDivider: string,\n    showSpecialist: string,\n    showGeneralTypeDropDown: string,\n    selected: string,\n    showDivCitizenAppoinments: string,\n    chooseOtherOptions: boolean,\n    agencySelection: string,\n    showDivHPBView: string,\n    showHospitalView: string,\n    showGeneralTypeDropDownHPB: string,\n    showDIVHPBcomuunityHealth: string,\n    showDIVHPBworkplaceHealth: string,\n    showGeneralServiceDropDown: string,\n    showGeneralServiceDropDownHospital: string,\n    dropDownHint: string,\n    generatedNumber: string,\n}\n\nvar queueNumberArray: number[] = [];\n\n\n\n\n\nclass Appointment extends React.Component<{}, MyState> {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            bookings: [],\n            inputValue: '',\n            clicked: 'none',\n            showModal: false,\n            showNRIC: 'none',\n            showGeneralPractioner: 'block',\n            showDivider: 'block',\n            showSpecialist: 'block',\n            showGeneralTypeDropDown: 'none',\n            selected: 'A',\n            showDivCitizenAppoinments: 'none',\n            chooseOtherOptions: false,\n            agencySelection: \"HPB\",\n            showDivHPBView: \"block\",\n            showHospitalView: \"none\",\n            showGeneralTypeDropDownHPB: \"none\",\n            showDIVHPBcomuunityHealth: \"block\",\n            showDIVHPBworkplaceHealth: \"block\",\n            showGeneralServiceDropDown: \"none\",\n            showGeneralServiceDropDownHospital: \"none\",\n            dropDownHint: \"Select a service\",\n            generatedNumber: \"\",\n\n        };\n        this.loadData = this.loadData.bind(this);\n\n    }\n\n\n    componentDidMount() {\n        this.loadData();\n        // setInterval(this.loadData, 1000);\n    }\n\n    async loadData() {\n        // if (this.state.chooseOtherOptions == false) {\n        try {\n            var apiURL: string\n            apiURL = process.env.REACT_APP_APPOINTMENT_API_ADDRESS + 'api/booking/location/Tampines';\n\n            fetch(apiURL)\n                .then(function (response) {\n\n                    return response.json();\n                })\n                .then((myJson) => {\n                    this.setState({\n                        bookings: []\n                    })\n                    myJson.data.forEach(element => {\n                        var eachBooking = new Booking(\n                            element[\"_id\"],\n                            element[\"nric\"],\n                            element[\"citizenName\"],\n                            element[\"citizenSalutation\"],\n                            element[\"citizenEmail\"],\n                            element[\"citizenNumber\"],\n                            element[\"generalType\"],\n                            element[\"serviceName\"],\n                            element[\"serviceProviderName\"],\n                            element[\"serviceProviderEmail\"],\n                            element[\"serviceProviderPhone\"],\n                            element[\"serviceStartDate\"],\n                            element[\"serviceStartTime\"],\n                            element[\"serviceProviderLocation\"],\n                            element[\"bookingStatus\"],\n                            element[\"queueNumber\"]\n                        );\n\n                        this.state.bookings.push(eachBooking)\n                        this.setState({\n                            bookings: this.state.bookings,\n                            clicked: 'block'\n                        });\n\n                    });\n                });\n\n        } catch (e) {\n            console.log(e);\n        }\n        // }\n\n\n    }\n\n\n\n    public async searchByLocation(val: string) {\n\n\n\n        console.log(val)\n\n        if (val == \"General Practioner\") {\n            this.loadData();\n\n            this.setState({\n                showSpecialist: 'none',\n                showDivider: 'none',\n                showGeneralPractioner: 'block',\n                showNRIC: 'none',\n                showGeneralTypeDropDown: 'block',\n                showGeneralServiceDropDownHospital: 'none'\n            });\n\n\n\n        }\n        if (val == \"Specialist\") {\n            this.loadData();\n\n            this.setState({\n                showSpecialist: 'block',\n                showDivider: 'none',\n                showGeneralPractioner: 'none',\n                showNRIC: 'none',\n                showGeneralTypeDropDown: 'block',\n                showGeneralServiceDropDownHospital: 'none'\n\n            });\n            window.location.reload()\n\n            this.loadData();\n\n\n        }\n\n        if (val == \"communityHealth\") {\n            this.loadData();\n\n            this.setState({\n                showSpecialist: 'none',\n                showDivider: 'none',\n                showGeneralPractioner: 'none',\n                showNRIC: 'none',\n                showGeneralTypeDropDownHPB: 'block',\n                showDIVHPBcomuunityHealth: \"block\",\n                showDIVHPBworkplaceHealth: \"none\",\n                showGeneralServiceDropDownHospital: 'none'\n\n            });\n\n\n\n        }\n\n        if (val == \"workplaceHealth\") {\n            this.loadData();\n\n            this.setState({\n                showSpecialist: 'none',\n                showDivider: 'none',\n                showGeneralPractioner: 'none',\n                showNRIC: 'none',\n                showGeneralTypeDropDownHPB: 'block',\n                showDIVHPBcomuunityHealth: \"none\",\n                showDIVHPBworkplaceHealth: \"block\",\n                showGeneralServiceDropDownHospital: 'none'\n\n            });\n\n\n\n\n        }\n\n\n\n        if (val == \"NRIC\") {\n            // this.loadData();\n\n            this.setState({\n                showGeneralServiceDropDownHospital: 'none'\n            })\n\n            if (this.state.inputValue == '' || this.state.inputValue == null) {\n                return;\n            }\n\n            var apiURL: string\n            apiURL = process.env.REACT_APP_APPOINTMENT_API_ADDRESS + 'api/booking/citizen/' + this.state.inputValue;\n            console.log(\"testing::: \" + apiURL)\n            fetch(apiURL)\n                .then(function (response) {\n\n                    return response.json();\n                })\n                .then((myJson) => {\n                    this.state.bookings.length = 0;\n                    myJson.data.forEach(element => {\n                        var eachBooking = new Booking(\n                            element[\"_id\"],\n                            element[\"nric\"],\n                            element[\"citizenName\"],\n                            element[\"citizenSalutation\"],\n                            element[\"citizenEmail\"],\n                            element[\"citizenNumber\"],\n                            element[\"generalType\"],\n                            element[\"serviceName\"],\n                            element[\"serviceProviderName\"],\n                            element[\"serviceProviderEmail\"],\n                            element[\"serviceProviderPhone\"],\n                            element[\"serviceStartDate\"],\n                            element[\"serviceStartTime\"],\n                            element[\"serviceProviderLocation\"],\n                            element[\"bookingStatus\"],\n                            element[\"queueNumber\"]\n                        );\n\n\n                        // const bookings = this.state.bookings.slice(0);\n                        this.state.bookings.push(eachBooking)\n\n\n                        // console.log(bookings)\n\n                        this.setState({\n                            bookings: this.state.bookings,\n                            clicked: 'block',\n                            showDivCitizenAppoinments: 'block'\n                        });\n\n                    });\n                });\n        }\n\n\n    }\n\n    render() {\n\n\n        return (\n\n            <div>\n\n\n\n                <StyledSection>\n\n                    <Modal.Base\n                        show={this.state.showModal}\n                        animationFrom=\"bottom\"\n                        enableOverlayClick={true}\n                    // onOverlayClick={closeModal()}\n                    >\n                        <Modal.Box onClose={() => {\n\n                            this.setState({\n                                showModal: false\n                            });\n\n\n\n                        }}>\n                            <ModalContent>\n                                Send to queue successfully\n                                <b> {this.state.generatedNumber}</b>\n                            </ModalContent>\n                        </Modal.Box>\n                    </Modal.Base>\n\n                    <Layout.Container>\n\n\n\n                        <Breadcrumb links={[{ title: 'Home', url: '/Home' }, { title: 'Appointments' }]} />\n\n\n                        Change Agency View:\n                        <div id='divAgency' className=\"inlinecontent\" style={{ justifyItems: \"start\", maxWidth: '400px' }}>\n                            <InputSelect\n                                options={[\n                                    { value: \"HPB\", label: \"HPB\" },\n                                    { value: \"Hospital\", label: \"Hospital\" },\n\n                                ]}\n\n                                valueExtractor={(item) => item.value}\n                                listExtractor={(item) => item.label}\n\n                                displayValueExtractor={(item) => item.label}\n                                placeholder={this.state.agencySelection}\n                                onSelectItem={(item, selectedValue) => {\n                                    this.setState({ inputValue: selectedValue }, () => {\n                                        this.ddlAgency(selectedValue)\n\n                                    });\n                                }} />\n\n                        </div>\n\n                        <br />\n\n                        <div id='hpbView' style={{ display: this.state.showDivHPBView }}>\n\n\n                            <Container>\n                                <OptionContainer>\n                                    <RadioButton value=\"A\" id=\"multiple-options-a\" name=\"multiple-options\" onChange={() => {\n                                        this.setState({\n                                            selected: 'A',\n                                            showSpecialist: 'block',\n                                            showDivider: 'block',\n                                            showGeneralPractioner: 'block',\n                                            showNRIC: 'none',\n                                            showGeneralTypeDropDown: 'none',\n                                            showDivCitizenAppoinments: 'none',\n                                            chooseOtherOptions: false,\n                                            showGeneralTypeDropDownHPB: \"none\",\n                                            showDIVHPBcomuunityHealth: \"block\",\n                                            showDIVHPBworkplaceHealth: \"block\"\n\n                                        }\n\n                                        );\n\n                                        this.loadData();\n                                    }\n\n                                    } checked={this.state.selected === \"A\"} />\n                                    <Label htmlFor=\"multiple-options-a\">View All Appointments</Label>\n                                </OptionContainer>\n                                <OptionContainer>\n                                    <RadioButton value=\"B\" id=\"multiple-options-b\" name=\"multiple-options\" onChange={() => {\n                                        this.setState({\n                                            selected: 'B',\n                                            showSpecialist: 'none',\n                                            showDivider: 'none',\n                                            showGeneralPractioner: 'none',\n                                            showNRIC: 'block',\n                                            showGeneralTypeDropDown: 'none',\n                                            showDivCitizenAppoinments: 'none',\n                                            chooseOtherOptions: true,\n                                            showGeneralTypeDropDownHPB: \"none\",\n                                            showDIVHPBcomuunityHealth: \"none\",\n                                            showDIVHPBworkplaceHealth: \"none\"\n                                        }\n\n                                        );\n                                    }} checked={this.state.selected === \"B\"} />\n                                    <Label htmlFor=\"multiple-options-b\">View appointments by NRIC</Label>\n                                </OptionContainer>\n\n\n                                <OptionContainer>\n                                    <RadioButton value=\"C\" id=\"multiple-options-c\" name=\"multiple-options\" onChange={() => {\n                                        this.setState({\n                                            selected: 'C',\n                                            showSpecialist: 'none',\n                                            showDivider: 'none',\n                                            showGeneralPractioner: 'none',\n                                            showNRIC: 'none',\n                                            showGeneralTypeDropDown: 'none',\n                                            showDivCitizenAppoinments: 'none',\n                                            chooseOtherOptions: true,\n                                            showGeneralTypeDropDownHPB: \"block\",\n                                            showDIVHPBworkplaceHealth: \"none\",\n                                            showDIVHPBcomuunityHealth: \"none\",\n                                            showGeneralServiceDropDownHospital: \"block\",\n                                            dropDownHint: \"Select a service\"\n                                        }\n\n                                        );\n                                    }} checked={this.state.selected === \"C\"} />\n                                    <Label htmlFor=\"multiple-options-c\">View appointments by service</Label>\n                                </OptionContainer>\n\n                            </Container>\n\n                            <div className=\"spacer2\"></div>\n\n                            <div id='divNRIC' style={{ justifyItems: \"start\", maxWidth: '400px', display: this.state.showNRIC }}>\n                                <div style={{ 'margin': '5px' }}>\n                                    <Text.Body >Search by NRIC: </Text.Body>\n                                </div>\n                                <InputGroup addon={{\n                                    type: 'custom'\n                                }} placeholder=\"Type NRIC here...\"\n\n                                    onChange={evt => this.updateInputValue(evt)}\n                                />\n\n                                <div style={{ 'padding': '5px' }}></div>\n                                <Button.Default onClick={() => this.searchByLocation(\"NRIC\")} >Search</Button.Default>\n                            </div>\n\n\n                            <div id='divLocation' className=\"inlinecontent\" style={{ justifyItems: \"start\", maxWidth: '400px', display: this.state.showGeneralTypeDropDownHPB }}>\n                                <InputSelect\n                                    options={[\n                                        { value: \"communityHealth\", label: \"communityHealth\" },\n                                        { value: \"workplaceHealth\", label: \"workplaceHealth\" },\n\n                                    ]}\n\n                                    valueExtractor={(item) => item.value}\n                                    listExtractor={(item) => item.label}\n                                    displayValueExtractor={(item) => item.label}\n                                    placeholder={this.state.dropDownHint}\n                                    onSelectItem={(item, selectedValue) => {\n                                        this.setState({ inputValue: selectedValue }, () => {\n                                            this.searchByLocation(selectedValue)\n                                        });\n                                    }} />\n\n                            </div>\n\n\n                            <div className=\"spacer5\"></div>\n\n                            <div id='divAppointments' >\n\n                                <div id='divGeneralPractioner' className='rcorner2' style={{ 'display': this.state.showDIVHPBcomuunityHealth }}>\n\n\n                                    <StyledContainer>\n                                        <Text.H3>Appointments [HPB Consultation - communityHealth]</Text.H3>\n                                        <Text.Body>Government services appointments</Text.Body>\n                                        <Main>\n\n\n\n\n                                            <Accordion.Base className='base' >\n                                                {this.state.bookings.filter((element => element.GeneralType == 'HPB Consultation - communityHealth')).map((input, index) => {\n                                                    var showButton = 'none';\n                                                    if ((input.BookingStatus == 'New' && input.ServiceProviderName.includes(\"HPB\") || input.BookingStatus.includes ('workplaceHealth') || input.BookingStatus.includes ('communityHealth') ) ){\n                                                        showButton = 'block';\n                                                    }\n                                                    console.log(this.state.bookings)\n                                                    return (\n                                                        <Accordion.Item title={input.CitizenName} key={index} expanded={false}>\n                                                            <Text.Body>\n                                                                <ul>\n                                                                    <li>\n                                                                        <b>Citizen Name :</b>  {input.CitizenName}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Citizen Number: </b> {input.CitizenNumber}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Citizen Email: </b> {input.CitizenEmail}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service start date:</b>  {input.ServiceStartDate}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service start time:</b>  {input.ServiceStartTime}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Name:</b>  {input.ServiceName}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Provider Location:</b>  {input.ServiceProviderLocation}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Status:</b>  {input.BookingStatus}\n                                                                    </li>\n                                                                </ul>\n                                                                <div style={{ 'display': showButton }}>\n                                                                    <Button.Default\n                                                                        onClick={() => this.checkPage(this.handle200, input)}\n                                                                    >Send to Queue</Button.Default>\n                                                                </div>\n\n                                                            </Text.Body>\n                                                        </Accordion.Item>\n                                                    )\n                                                })}\n                                            </Accordion.Base>\n\n                                        </Main>\n\n\n                                        <div className=\"spacer3\"></div>\n                                    </StyledContainer>\n                                </div>\n\n                                <br />\n\n                                <div id='divGeneralPractioner' className='rcorner' style={{ 'display': this.state.showDIVHPBworkplaceHealth }}>\n\n                                    <StyledContainer>\n                                        <Text.H3>Appointments [HPB Consultation - workplaceHealth]</Text.H3>\n                                        <Text.Body>Government services appointments</Text.Body>\n                                        <Main>\n\n\n\n\n                                            <Accordion.Base className='base' >\n                                                {this.state.bookings.filter((element => element.GeneralType == 'HPB Consultation - workplaceHealth')).map((input, index) => {\n                                                    var showButton = 'none';\n                                                    if ((input.BookingStatus == 'New' && input.ServiceProviderName.includes(\"HPB\") || input.BookingStatus.includes ('workplaceHealth') || input.BookingStatus.includes ('communityHealth') ) ){\n                                                        showButton = 'block';\n                                                    }\n                                                    console.log(this.state.bookings)\n                                                    return (\n                                                        <Accordion.Item title={input.CitizenName} key={index} expanded={false}>\n                                                            <Text.Body>\n                                                                <ul>\n                                                                    <li>\n                                                                        <b>Citizen Name :</b>  {input.CitizenName}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Citizen Number: </b> {input.CitizenNumber}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Citizen Email: </b> {input.CitizenEmail}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service start date:</b>  {input.ServiceStartDate}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service start time:</b>  {input.ServiceStartTime}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Name:</b>  {input.ServiceName}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Provider Location:</b>  {input.ServiceProviderLocation}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Status:</b>  {input.BookingStatus}\n                                                                    </li>\n                                                                </ul>\n                                                                <div style={{ 'display': showButton }}>\n                                                                    <Button.Default\n                                                                        onClick={() => this.checkPage(this.handle200, input)}\n                                                                    >Send to Queue</Button.Default>\n                                                                </div>\n\n                                                            </Text.Body>\n                                                        </Accordion.Item>\n                                                    )\n                                                })}\n                                            </Accordion.Base>\n\n                                        </Main>\n\n\n                                        <div className=\"spacer3\"></div>\n                                    </StyledContainer>\n\n                                </div>\n\n\n                                <div id='divDivider' className=\"spacer5\" style={{ 'display': this.state.showDivider }}></div>\n\n                                <div id='divCitizenAppointments' style={{ 'display': this.state.showDivCitizenAppoinments }}>\n                                    <Main>\n\n\n\n\n                                        <Accordion.Base className='base' >\n                                            {\n\n                                                this.state.bookings.filter((element => element.ServiceProviderLocation == 'Tampines')).map(\n\n\n                                                    (input, index) => {\n\n                                                        var showButton = 'none';\n                                                        if ((input.BookingStatus == 'New' && input.ServiceProviderName.includes(\"HPB\") || input.BookingStatus.includes ('workplaceHealth') || input.BookingStatus.includes ('communityHealth') ) ){\n                                                            showButton = 'block';\n                                                        }\n\n                                                        return (\n                                                            <Accordion.Item title={input.CitizenName} key={index} expanded={false}>\n                                                                <Text.Body>\n                                                                    <ul>\n                                                                        <li>\n                                                                            <b>Citizen Name :</b>  {input.CitizenName}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Citizen Number: </b> {input.CitizenNumber}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Citizen Email: </b> {input.CitizenEmail}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service start date:</b>  {input.ServiceStartDate}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service start time:</b>  {input.ServiceStartTime}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service Name:</b>  {input.ServiceName}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service Provider Location:</b>  {input.ServiceProviderLocation}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service Status:</b>  {input.BookingStatus}\n                                                                        </li>\n                                                                    </ul>\n                                                                    <div style={{ 'display': showButton }}>\n                                                                        <Button.Default\n                                                                            onClick={() => this.checkPage(this.handle200, input)}\n                                                                        >Send to Queue</Button.Default>\n                                                                    </div>\n\n                                                                </Text.Body>\n                                                            </Accordion.Item>\n                                                        )\n\n\n\n\n                                                    })}\n                                        </Accordion.Base>\n\n                                    </Main>\n                                </div>\n\n\n\n\n                            </div>\n\n                        </div>\n\n                        <div id='hospitalView' style={{ display: this.state.showHospitalView }}>\n\n\n                            <Container>\n                                <OptionContainer>\n                                    <RadioButton value=\"A\" id=\"multiple-options-a\" name=\"multiple-options\" onChange={() => {\n                                        this.setState({\n                                            selected: 'A',\n                                            showSpecialist: 'block',\n                                            showDivider: 'block',\n                                            showGeneralPractioner: 'block',\n                                            showNRIC: 'none',\n                                            showGeneralServiceDropDownHospital: 'none',\n                                            showDivCitizenAppoinments: 'none',\n                                            chooseOtherOptions: false\n                                        }\n\n                                        );\n                                        console.log(\"testing!!!!1\")\n                                        this.loadData();\n                                    }\n\n                                    } checked={this.state.selected === \"A\"} />\n                                    <Label htmlFor=\"multiple-options-a\">View All Appointments</Label>\n                                </OptionContainer>\n                                <OptionContainer>\n                                    <RadioButton value=\"B\" id=\"multiple-options-b\" name=\"multiple-options\" onChange={() => {\n                                        this.setState({\n                                            selected: 'B',\n                                            showSpecialist: 'none',\n                                            showDivider: 'none',\n                                            showGeneralPractioner: 'none',\n                                            showNRIC: 'block',\n                                            showGeneralServiceDropDownHospital: 'none',\n                                            showDivCitizenAppoinments: 'none',\n                                            chooseOtherOptions: true\n\n                                        }\n\n                                        );\n                                    }} checked={this.state.selected === \"B\"} />\n                                    <Label htmlFor=\"multiple-options-b\">View appointments by NRIC</Label>\n                                </OptionContainer>\n                                <OptionContainer>\n                                    <RadioButton value=\"C\" id=\"multiple-options-c\" name=\"multiple-options\" onChange={() => {\n                                        this.setState({\n                                            selected: 'C',\n                                            showSpecialist: 'none',\n                                            showDivider: 'none',\n                                            showGeneralPractioner: 'none',\n                                            showNRIC: 'none',\n                                            showGeneralServiceDropDownHospital: 'block',\n                                            showDivCitizenAppoinments: 'none',\n                                            chooseOtherOptions: true\n                                        });\n\n                                    }} checked={this.state.selected === \"C\"} />\n                                    <Label htmlFor=\"multiple-options-c\">View Appointments by Service Type</Label>\n                                </OptionContainer>\n                            </Container>\n\n                            <div className=\"spacer2\"></div>\n\n                            <div id='divNRIC' style={{ justifyItems: \"start\", maxWidth: '400px', display: this.state.showNRIC }}>\n                                <div style={{ 'margin': '5px' }}>\n                                    <Text.Body >Search by NRIC: </Text.Body>\n                                </div>\n                                <InputGroup addon={{\n                                    type: 'custom'\n                                }} placeholder=\"Type NRIC here...\"\n\n                                    onChange={evt => this.updateInputValue(evt)}\n                                />\n\n                                <div style={{ 'padding': '5px' }}></div>\n                                <Button.Default onClick={() => this.searchByLocation(\"NRIC\")} >Search</Button.Default>\n                            </div>\n\n                            <div className=\"inlinecontent\" style={{ justifyItems: \"start\", maxWidth: '400px', display: this.state.showGeneralServiceDropDownHospital }}>\n                                <InputSelect\n                                    options={[\n                                        { value: \"General Practioner\", label: \"General Practioner\" },\n                                        { value: \"Specialist\", label: \"Specialist\" },\n\n                                    ]}\n\n                                    valueExtractor={(item) => item.value}\n                                    listExtractor={(item) => item.label}\n                                    displayValueExtractor={(item) => item.label}\n                                    placeholder=\"Select a service type\"\n                                    onSelectItem={(item, selectedValue) => {\n                                        this.setState({ inputValue: selectedValue }, () => {\n                                            this.searchByLocation(selectedValue)\n                                        });\n                                    }} />\n\n                            </div>\n\n\n\n                            <div className=\"spacer5\"></div>\n\n                            <div id='divAppointments' >\n\n                                <div id='divGeneralPractioner' className='rcorner2' style={{ 'display': this.state.showGeneralPractioner }}>\n\n\n                                    <StyledContainer>\n                                        <Text.H3>Appointments [General Practioner]</Text.H3>\n                                        <Text.Body>Government services appointments</Text.Body>\n                                        <Main>\n\n\n\n\n                                            <Accordion.Base className='base' >\n                                                {this.state.bookings.filter((element => element.GeneralType == 'General Practionar' || !element.BookingStatus.includes(\"HPB\"))).map((input, index) => {\n                                                    var showButton = 'none';\n                                                    if ((input.BookingStatus == 'New' && !input.ServiceProviderName.includes(\"HPB\") || input.BookingStatus.includes ('Payment') || input.BookingStatus.includes ('Pharmacy') || input.BookingStatus.includes ('Doctor')) ){\n                                                        showButton = 'block';\n                                                    }\n                                                    console.log(this.state.bookings)\n                                                    return (\n                                                        <Accordion.Item title={input.CitizenName} key={index} expanded={false}>\n                                                            <Text.Body>\n                                                                <ul>\n                                                                    <li>\n                                                                        <b>Citizen Name :</b>  {input.CitizenName}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Citizen Number: </b> {input.CitizenNumber}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Citizen Email: </b> {input.CitizenEmail}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service start date:</b>  {input.ServiceStartDate}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service start time:</b>  {input.ServiceStartTime}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Name:</b>  {input.ServiceName}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Provider Location:</b>  {input.ServiceProviderLocation}\n                                                                    </li>\n                                                                    <li>\n                                                                        <b>Service Status:</b>  {input.BookingStatus}\n                                                                    </li>\n                                                                </ul>\n                                                                <div style={{ 'display': showButton }}>\n                                                                    <Button.Default\n                                                                        onClick={() => this.checkPage(this.handle200, input)}\n                                                                    >Send to Queue</Button.Default>\n                                                                </div>\n\n                                                            </Text.Body>\n                                                        </Accordion.Item>\n                                                    )\n                                                })}\n                                            </Accordion.Base>\n\n                                        </Main>\n\n\n                                        <div className=\"spacer3\"></div>\n                                    </StyledContainer>\n\n\n                                </div>\n                                <div id='divDivider' className=\"spacer5\" style={{ 'display': this.state.showDivider }}></div>\n\n                                <div id='divCitizenAppointments' style={{ 'display': this.state.showDivCitizenAppoinments }}>\n                                    <Main>\n\n\n\n\n                                        <Accordion.Base className='base' >\n                                            {\n\n                                                this.state.bookings.filter((element => element.ServiceProviderLocation == 'Tampines')).map(\n\n\n                                                    (input, index) => {\n\n                                                        var showButton = 'none';\n                                                        if ((input.BookingStatus == 'New' && !input.ServiceProviderName.includes(\"HPB\") || input.BookingStatus.includes ('Payment') || input.BookingStatus.includes ('Pharmacy') || input.BookingStatus.includes ('Doctor')) ){\n                                                            showButton = 'block';\n                                                        }\n\n                                                        return (\n                                                            <Accordion.Item title={input.CitizenName} key={index} expanded={false}>\n                                                                <Text.Body>\n                                                                    <ul>\n                                                                        <li>\n                                                                            <b>Citizen Name :</b>  {input.CitizenName}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Citizen Number: </b> {input.CitizenNumber}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Citizen Email: </b> {input.CitizenEmail}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service start date:</b>  {input.ServiceStartDate}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service start time:</b>  {input.ServiceStartTime}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service Name:</b>  {input.ServiceName}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service Provider Location:</b>  {input.ServiceProviderLocation}\n                                                                        </li>\n                                                                        <li>\n                                                                            <b>Service Status:</b>  {input.BookingStatus}\n                                                                        </li>\n                                                                    </ul>\n                                                                    <div style={{ 'display': showButton }}>\n                                                                        <Button.Default\n                                                                            onClick={() => this.checkPage(this.handle200, input)}\n                                                                        >Send to Queue</Button.Default>\n                                                                    </div>\n\n                                                                </Text.Body>\n                                                            </Accordion.Item>\n                                                        )\n\n\n\n\n                                                    })}\n                                        </Accordion.Base>\n\n                                    </Main>\n                                </div>\n\n                                <div id='divSpecialist' className='rcorner' style={{ 'display': this.state.showSpecialist }}>\n\n\n                                    <StyledContainer>\n                                        <Text.H3>Appointments [Specialist]</Text.H3>\n                                        <Text.Body>Government services appointments</Text.Body>\n                                        <Main>\n\n\n\n\n                                            <Accordion.Base className='base' >\n                                                {\n\n                                                    this.state.bookings.filter((element => element.GeneralType == 'Specialist')).map(\n\n\n                                                        (input, index) => {\n\n                                                            var showButton = 'none';\n                                                            if ((input.BookingStatus == 'New' && !input.ServiceProviderName.includes(\"HPB\") || input.BookingStatus.includes ('Payment') || input.BookingStatus.includes ('Pharmacy') || input.BookingStatus.includes ('Doctor')) ){\n                                                                showButton = 'none';\n                                                            }\n                                                            else{\n                                                                showButton = 'block'\n                                                            }\n                                                            console.log(this.state.bookings)\n                                                            if (input.GeneralType == 'General Practionar') {\n                                                            }\n                                                            return (\n                                                                <Accordion.Item title={input.CitizenName + \" - \"  + input.QueueNumber} key={index} expanded={false}>\n                                                                    <Text.Body>\n                                                                        <ul>\n                                                                            <li>\n                                                                                <b>Citizen Name :</b>  {input.CitizenName}\n                                                                            </li>\n                                                                            <li>\n                                                                                <b>Citizen Number: </b> {input.CitizenNumber}\n                                                                            </li>\n                                                                            <li>\n                                                                                <b>Citizen Email: </b> {input.CitizenEmail}\n                                                                            </li>\n                                                                            <li>\n                                                                                <b>Service start date:</b>  {input.ServiceStartDate}\n                                                                            </li>\n                                                                            <li>\n                                                                                <b>Service start time:</b>  {input.ServiceStartTime}\n                                                                            </li>\n                                                                            <li>\n                                                                                <b>Service Name:</b>  {input.ServiceName}\n                                                                            </li>\n                                                                            <li>\n                                                                                <b>Service Provider Location:</b>  {input.ServiceProviderLocation}\n                                                                            </li>\n                                                                            <li>\n                                                                                <b>Service Status:</b>  {input.BookingStatus}\n                                                                            </li>\n                                                                        </ul>\n                                                                        <div style={{ 'display': showButton }}>\n                                                                            <Button.Default\n                                                                                onClick={() => this.checkPage(this.handle200, input)}\n                                                                            >Send to Queue</Button.Default>\n                                                                        </div>\n\n                                                                    </Text.Body>\n                                                                </Accordion.Item>\n                                                            )\n\n\n\n\n                                                        })}\n                                            </Accordion.Base>\n\n                                        </Main>\n\n\n                                        <div className=\"spacer3\"></div>\n                                    </StyledContainer>\n                                </div>\n\n\n                            </div>\n\n                        </div>\n                    </Layout.Container>\n                </StyledSection>\n            </div>\n        )\n    }\n\n    ddlAgency(selectedValue: any) {\n        if (selectedValue == \"HPB\") {\n            this.setState({\n                showDivHPBView: \"block\",\n                showHospitalView: \"none\",\n                showDivCitizenAppoinments: \"none\",\n                dropDownHint: \"Select a service\"\n\n            })\n        }\n        else {\n            this.setState({\n                showDivHPBView: \"none\",\n                showHospitalView: \"block\",\n                showDivCitizenAppoinments: \"none\",\n                dropDownHint: \"Select a service\"\n\n\n            })\n        }\n    }\n\n    handle200(response) {\n        console.log('handle200 has received:', response);\n    }\n\n    checkPage(callback, booking: Booking) {\n        this.loadData()\n\n        queueNumberArray.push(0)\n\n        console.log(\"queue number arrary\" + queueNumberArray);\n        var num = Math.max.apply(null, queueNumberArray) + 1;\n        queueNumberArray.push(num)\n\n        console.log(\"max number: \" + num)\n        var str = String(num);\n        while (str.length < 4) str = \"0\" + str;\n        str = \"H\" + str;\n        var date = new Date().toISOString().split('T')[0]\n        \n        if(booking.QueueNumber == \"\"){\n            booking.QueueNumber = str\n            this.setState({\n                generatedNumber: \"Generated queue number is \" + str\n            })\n        }\n        else{\n            booking.QueueNumber = booking.QueueNumber\n            this.setState({\n                generatedNumber: \"Current queue number is \" + booking.QueueNumber\n            })\n        }\n\n        \n\n        const myJSON = encodeURI(JSON.stringify(booking));\n\n        var updatedURL = \"\";\n\n        if ( (booking.GeneralType == \"HPB Consultation - workplaceHealth\" && booking.BookingStatus == \"New\") || booking.BookingStatus.includes( \"workplaceHealth\")) {\n            updatedURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + booking.Id + \"&exchangeID=master&bindingKey=hpb.whq&bookingDetails=\" + myJSON;\n        }\n        else if ( (booking.GeneralType == \"HPB Consultation - communityHealth\" && booking.BookingStatus ==\"New\") || booking.BookingStatus.includes(\"communityHealth\")) {\n            updatedURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + booking.Id + \"&exchangeID=master&bindingKey=hpb.chq&bookingDetails=\" + myJSON;\n            console.log(updatedURL)\n        }\n        else if ( (booking.GeneralType == \"General Practionar\" && booking.BookingStatus ==\"New\") || (booking.GeneralType == \"Specialist\" && booking.BookingStatus ==\"New\") || booking.BookingStatus.includes(\"Doctor\")) {\n            updatedURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + booking.Id + \"&exchangeID=master&bindingKey=sgh.doctor&bookingDetails=\" + myJSON;\n        }\n        else if (booking.BookingStatus == \"Payment-Missed\" || booking.BookingStatus.includes(\"Payment\")) {\n            updatedURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + booking.Id + \"&exchangeID=master&bindingKey=sgh.payment&bookingDetails=\" + myJSON;\n        }\n        else if (booking.BookingStatus == \"Pharmcy-Missed\" || booking.BookingStatus.includes(\"Pharmcy\")) {\n            updatedURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + booking.Id + \"&exchangeID=master&bindingKey=sgh.pharmcy&bookingDetails=\" + myJSON;\n        }\n\n        console.log(\"testing now \" + updatedURL)\n\n        const xhr = new XMLHttpRequest(),\n            method = \"GET\",\n            url = updatedURL;\n\n        // initialize a new GET request\n        xhr.open(method, url, true);\n\n        // respond to every readyState change\n        xhr.onreadystatechange = () => {\n\n            // ignore all readyStates other than \"DONE\"\n            if (xhr.readyState !== XMLHttpRequest.DONE) { return; }\n\n            // call the callback with status\n            if (xhr.status === 200) {\n\n\n                if ( (booking.GeneralType.toString().includes(\"workplaceHealth\") && booking.BookingStatus == \"New\") || booking.BookingStatus == \"workplaceHealth-Missed\") {\n                    booking.BookingStatus = \"workplaceHealth-Queued\";\n                }\n                else if ( (booking.GeneralType.toString().includes(\"communityHealth\") && booking.BookingStatus == \"New\") || booking.BookingStatus == \"communityHealth-Missed\") {\n                    booking.BookingStatus = \"communityHealth-Queued\";\n                }\n\n                else if ( (booking.GeneralType.toString().includes(\"General Practionar\") && booking.BookingStatus == \"New\") || booking.BookingStatus == \"Doctor-Missed\") {\n                    booking.BookingStatus = \"Doctor-Queued\";\n                }\n                else if ( (booking.GeneralType.toString().includes(\"Specialist\") && booking.BookingStatus == \"New\") || booking.BookingStatus == \"Doctor-Missed\") {\n                    booking.BookingStatus = \"Doctor-Queued\";\n                }\n                else if (  booking.BookingStatus == \"Payment-Missed\" ) {\n                    booking.BookingStatus = \"Payment-Queued\";\n                }\n                else if ( booking.BookingStatus == \"Pharmacy-Missed\"){\n                    booking.BookingStatus = \"Pharmacy-Queued\";\n                }\n\n                \n\n\n\n          \n\n                BaseService.update<Booking>(process.env.REACT_APP_APPOINTMENT_API_ADDRESS + \"api/booking/update/\", booking.Id, booking).then(\n\n                    (rp) => {\n                        if (rp.Status) {\n\n                        this.setState({\n                            showModal: true\n                        })\n                        this.loadData()\n                    \n                    } else {\n                            console.log(rp.Messages);\n                            console.log(\"Messages: \" + rp.Messages);\n                            console.log(\"Exception: \" + rp.Exception);\n                        }\n                    }\n                );\n\n                //  console.log(\"debugging: ------------------\")\n                //  console.log(\"current queue is: \")\n                //  console.log(this.state.queue)\n\n                // if(this.state.queue.CurrentService.toString().includes(\"Missed\")){\n\n                //     if(service != \"individual\"){\n                //         this.state.queue.CurrentService = service + \"-Queued\";\n                //     }\n                //     else{\n                //         if(this.state.queue.CurrentService.toString().includes(\"workplaceHealth\")){\n                //             this.state.queue.CurrentService = \"workplaceHealth-Queued\";\n                //         }\n                //         else if(this.state.queue.CurrentService.toString().includes(\"workplaceHealth\")){\n                //             this.state.queue.CurrentService = \"communityHealth-Queued\";\n                //         }\n                //         else{\n                //             this.state.queue.CurrentService = \"Doctor-Queued\";\n\n                //         }\n                //     }\n\n                //     BaseService.update<Queue>(process.env.REACT_APP_QUEUE_API_ADDRESS + \"api/queue/update/\", this.state.queue.Id, this.state.queue).then(\n                //         (rp) => {\n                //             if (rp.Status) {\n                //                 console.log(\"Update successfully\")\n                //             } else {\n                //                 console.log(rp.Messages);\n                //                 console.log(\"Messages: \" + rp.Messages);\n                //                 console.log(\"Exception: \" + rp.Exception);\n                //             }\n                //         }\n                //     );\n                // }\n\n                //     BaseService.create<Queue>(process.env.REACT_APP_QUEUE_API_ADDRESS + \"api/queue/create\",  this.state.queue).then(\n                //         (rp) => {\n                //             if (rp.Status) {\n\n\n\n                //                 if(service != \"individual\"){\n                //                     booking.BookingStatus = service + \"-Queued\";\n                //                 }\n                //                 else{\n                //                     if(booking.GeneralType.includes(\"workplaceHealth\")){\n                //                         booking.BookingStatus = \"workplaceHealth-Queued\";\n                //                     }\n                //                     else if(booking.GeneralType.includes(\"workplaceHealth\")){\n                //                         booking.BookingStatus = \"communityHealth-Queued\";\n                //                     }\n                //                     else{\n                //                         booking.BookingStatus = \"Doctor-Queued\";\n                //                     }\n                //                 }\n\n\n\n                //                 BaseService.update<Booking>(process.env.REACT_APP_APPOINTMENT_API_ADDRESS + \"api/booking/update/\", booking.Id, booking).then(\n\n                //                     (rp) => {\n                //                         if (rp.Status) {\n                //                             console.log('Booking saved.');\n                //                         } else {\n                //                             console.log(rp.Messages);\n                //                             console.log(\"Messages: \" + rp.Messages);\n                //                             console.log(\"Exception: \" + rp.Exception);\n                //                         }\n                //                     }\n                //                 );\n\n\n                //             } else {\n                //                 console.log(rp.Messages);\n                //                 console.log(\"Messages: \" + rp.Messages);\n                //                 console.log(\"Exception: \" + rp.Exception);\n                //             }\n                //         }\n                //     );\n                // }\n\n                // if(service != \"individual\"){\n                //     booking.BookingStatus = service + \"-Queued\";\n                // }\n                // else{\n                //     if(booking.GeneralType.includes(\"workplaceHealth\")){\n                //         booking.BookingStatus = \"workplaceHealth-Queued\";\n                //     }\n                //     else if(booking.GeneralType.includes(\"workplaceHealth\")){\n                //         booking.BookingStatus = \"communityHealth-Queued\";\n                //     }\n                //     else{\n                //         booking.BookingStatus = \"Doctor-Queued\";\n                //     }\n                // }\n\n\n                // BaseService.update<Booking>(process.env.REACT_APP_APPOINTMENT_API_ADDRESS + \"api/booking/update/\", booking.Id, booking).then(\n\n                //     (rp) => {\n                //         if (rp.Status) {\n                //             console.log('Booking saved.');\n                //         } else {\n                //             console.log(rp.Messages);\n                //             console.log(\"Messages: \" + rp.Messages);\n                //             console.log(\"Exception: \" + rp.Exception);\n                //         }\n                //     }\n                // );\n\n\n\n                // this.setState({\n                //     showModal: true,\n                //     queues: this.state.queues\n                // });\n\n                // this.loadData()\n\n                return callback(xhr.status);\n            }\n\n            // got something other than 200,\n            // re-initialize and send another GET request\n            xhr.open(method, url, true);\n            xhr.send();\n        }\n\n        // send the initial GET request\n        xhr.send();\n    }\n\n    updateInputValue(evt) {\n        const val = evt.target.value;\n        this.setState({\n            inputValue: val\n        });\n\n\n\n    }\n\n    // async loadQueues() {\n    //     try {\n    //         var apiURL: string\n    //         var date = new Date().toISOString().split('T')[0].toString()\n\n    //         apiURL = process.env.REACT_APP_QUEUE_API_ADDRESS + 'api/queue/todayQueue/'+ date;\n    //         console.log(apiURL);\n    //         fetch(apiURL)\n    //             .then(function (response) {\n\n    //                 return response.json();\n    //             })\n    //             .then((myJson) => {\n    //                 this.setState({\n    //                     queues: []\n    //                 })\n    //                 myJson.data.forEach(element => {\n    //                     var eachQueue = new Queue(\n    //                         element[\"_id\"],\n    //                         element[\"queueNumber\"],\n    //                         element[\"appointmentId\"],\n    //                         element[\"currentService\"],\n    //                         element[\"queueDate\"],\n    //                         element[\"missedQueue\"]\n\n    //                     );\n\n    //                     this.state.queues.push(eachQueue)\n    //                     this.setState({\n    //                         queues: this.state.queues,\n    //                         clicked: 'block'\n    //                     });\n\n    //                 });\n    //             });\n\n    //             console.log(this.state.queues)\n\n    //     } catch (e) {\n    //         console.log(e);\n    //     }\n    // }\n\n\n\n\n\n}\n\nexport default Appointment;\n","/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/Home.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/displayBookingForm.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/DashboardHPB.tsx",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215"],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/DashboardHospital.tsx",["216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254"],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/service/base.service.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/models/booking.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/models/doc-elements.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/bookingsForm.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/models/response.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/common/components/form/index.ts",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/common/components/form/input.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/common/components/form/button.tsx",[],[],"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/common/components/form/dateinput.tsx",[],[],{"ruleId":"255","severity":1,"message":"256","line":48,"column":46,"nodeType":"257","messageId":"258","endLine":48,"endColumn":48},{"ruleId":"255","severity":1,"message":"256","line":134,"column":54,"nodeType":"257","messageId":"258","endLine":134,"endColumn":56},{"ruleId":"255","severity":1,"message":"256","line":190,"column":60,"nodeType":"257","messageId":"258","endLine":190,"endColumn":62},{"ruleId":"255","severity":1,"message":"256","line":208,"column":64,"nodeType":"257","messageId":"258","endLine":208,"endColumn":66},{"ruleId":"255","severity":1,"message":"256","line":217,"column":69,"nodeType":"257","messageId":"258","endLine":217,"endColumn":71},{"ruleId":"255","severity":1,"message":"259","line":403,"column":59,"nodeType":"257","messageId":"258","endLine":403,"endColumn":61},{"ruleId":"255","severity":1,"message":"256","line":433,"column":59,"nodeType":"257","messageId":"258","endLine":433,"endColumn":61},{"ruleId":"255","severity":1,"message":"256","line":438,"column":64,"nodeType":"257","messageId":"258","endLine":438,"endColumn":66},{"ruleId":"255","severity":1,"message":"256","line":466,"column":59,"nodeType":"257","messageId":"258","endLine":466,"endColumn":61},{"ruleId":"255","severity":1,"message":"256","line":495,"column":59,"nodeType":"257","messageId":"258","endLine":495,"endColumn":61},{"ruleId":"255","severity":1,"message":"256","line":546,"column":27,"nodeType":"257","messageId":"258","endLine":546,"endColumn":29},{"ruleId":"255","severity":1,"message":"256","line":575,"column":27,"nodeType":"257","messageId":"258","endLine":575,"endColumn":29},{"ruleId":"255","severity":1,"message":"256","line":586,"column":32,"nodeType":"257","messageId":"258","endLine":586,"endColumn":34},{"ruleId":"255","severity":1,"message":"256","line":598,"column":32,"nodeType":"257","messageId":"258","endLine":598,"endColumn":34},{"ruleId":"255","severity":1,"message":"256","line":609,"column":32,"nodeType":"257","messageId":"258","endLine":609,"endColumn":34},{"ruleId":"255","severity":1,"message":"256","line":621,"column":32,"nodeType":"257","messageId":"258","endLine":621,"endColumn":34},{"ruleId":"255","severity":1,"message":"256","line":662,"column":28,"nodeType":"257","messageId":"258","endLine":662,"endColumn":30},{"ruleId":"255","severity":1,"message":"256","line":668,"column":28,"nodeType":"257","messageId":"258","endLine":668,"endColumn":30},{"ruleId":"255","severity":1,"message":"256","line":720,"column":37,"nodeType":"257","messageId":"258","endLine":720,"endColumn":39},{"ruleId":"255","severity":1,"message":"256","line":727,"column":36,"nodeType":"257","messageId":"258","endLine":727,"endColumn":38},{"ruleId":"255","severity":1,"message":"256","line":761,"column":52,"nodeType":"257","messageId":"258","endLine":761,"endColumn":54},{"ruleId":"255","severity":1,"message":"256","line":781,"column":56,"nodeType":"257","messageId":"258","endLine":781,"endColumn":58},{"ruleId":"255","severity":1,"message":"256","line":790,"column":61,"nodeType":"257","messageId":"258","endLine":790,"endColumn":63},{"ruleId":"255","severity":1,"message":"256","line":834,"column":36,"nodeType":"257","messageId":"258","endLine":834,"endColumn":38},{"ruleId":"255","severity":1,"message":"256","line":849,"column":57,"nodeType":"257","messageId":"258","endLine":849,"endColumn":59},{"ruleId":"255","severity":1,"message":"256","line":855,"column":62,"nodeType":"257","messageId":"258","endLine":855,"endColumn":64},{"ruleId":"255","severity":1,"message":"259","line":859,"column":62,"nodeType":"257","messageId":"258","endLine":859,"endColumn":64},{"ruleId":"255","severity":1,"message":"259","line":859,"column":128,"nodeType":"257","messageId":"258","endLine":859,"endColumn":130},{"ruleId":"255","severity":1,"message":"259","line":859,"column":181,"nodeType":"257","messageId":"258","endLine":859,"endColumn":183},{"ruleId":"260","severity":1,"message":"261","line":912,"column":10,"nodeType":"262","messageId":"263","endLine":912,"endColumn":16},{"ruleId":"260","severity":1,"message":"264","line":3,"column":32,"nodeType":"262","messageId":"263","endLine":3,"endColumn":44},{"ruleId":"260","severity":1,"message":"265","line":3,"column":114,"nodeType":"262","messageId":"263","endLine":3,"endColumn":122},{"ruleId":"255","severity":1,"message":"256","line":167,"column":17,"nodeType":"257","messageId":"258","endLine":167,"endColumn":19},{"ruleId":"255","severity":1,"message":"256","line":182,"column":17,"nodeType":"257","messageId":"258","endLine":182,"endColumn":19},{"ruleId":"255","severity":1,"message":"256","line":201,"column":17,"nodeType":"257","messageId":"258","endLine":201,"endColumn":19},{"ruleId":"255","severity":1,"message":"256","line":220,"column":17,"nodeType":"257","messageId":"258","endLine":220,"endColumn":19},{"ruleId":"255","severity":1,"message":"256","line":242,"column":17,"nodeType":"257","messageId":"258","endLine":242,"endColumn":19},{"ruleId":"255","severity":1,"message":"256","line":249,"column":39,"nodeType":"257","messageId":"258","endLine":249,"endColumn":41},{"ruleId":"255","severity":1,"message":"256","line":499,"column":109,"nodeType":"257","messageId":"258","endLine":499,"endColumn":111},{"ruleId":"255","severity":1,"message":"256","line":501,"column":78,"nodeType":"257","messageId":"258","endLine":501,"endColumn":80},{"ruleId":"266","severity":1,"message":"267","line":501,"column":87,"nodeType":"268","messageId":"269","endLine":501,"endColumn":89},{"ruleId":"266","severity":1,"message":"267","line":501,"column":132,"nodeType":"268","messageId":"269","endLine":501,"endColumn":134},{"ruleId":"255","severity":1,"message":"256","line":566,"column":109,"nodeType":"257","messageId":"258","endLine":566,"endColumn":111},{"ruleId":"255","severity":1,"message":"256","line":568,"column":78,"nodeType":"257","messageId":"258","endLine":568,"endColumn":80},{"ruleId":"266","severity":1,"message":"267","line":568,"column":87,"nodeType":"268","messageId":"269","endLine":568,"endColumn":89},{"ruleId":"266","severity":1,"message":"267","line":568,"column":132,"nodeType":"268","messageId":"269","endLine":568,"endColumn":134},{"ruleId":"255","severity":1,"message":"256","line":633,"column":120,"nodeType":"257","messageId":"258","endLine":633,"endColumn":122},{"ruleId":"255","severity":1,"message":"256","line":639,"column":82,"nodeType":"257","messageId":"258","endLine":639,"endColumn":84},{"ruleId":"266","severity":1,"message":"267","line":639,"column":91,"nodeType":"268","messageId":"269","endLine":639,"endColumn":93},{"ruleId":"266","severity":1,"message":"267","line":639,"column":136,"nodeType":"268","messageId":"269","endLine":639,"endColumn":138},{"ruleId":"255","severity":1,"message":"256","line":814,"column":109,"nodeType":"257","messageId":"258","endLine":814,"endColumn":111},{"ruleId":"255","severity":1,"message":"256","line":816,"column":78,"nodeType":"257","messageId":"258","endLine":816,"endColumn":80},{"ruleId":"266","severity":1,"message":"267","line":816,"column":87,"nodeType":"268","messageId":"269","endLine":816,"endColumn":89},{"ruleId":"266","severity":1,"message":"267","line":816,"column":133,"nodeType":"268","messageId":"269","endLine":816,"endColumn":135},{"ruleId":"255","severity":1,"message":"256","line":880,"column":120,"nodeType":"257","messageId":"258","endLine":880,"endColumn":122},{"ruleId":"255","severity":1,"message":"256","line":886,"column":82,"nodeType":"257","messageId":"258","endLine":886,"endColumn":84},{"ruleId":"266","severity":1,"message":"267","line":886,"column":91,"nodeType":"268","messageId":"269","endLine":886,"endColumn":93},{"ruleId":"266","severity":1,"message":"267","line":886,"column":137,"nodeType":"268","messageId":"269","endLine":886,"endColumn":139},{"ruleId":"255","severity":1,"message":"256","line":952,"column":112,"nodeType":"257","messageId":"258","endLine":952,"endColumn":114},{"ruleId":"255","severity":1,"message":"256","line":958,"column":86,"nodeType":"257","messageId":"258","endLine":958,"endColumn":88},{"ruleId":"266","severity":1,"message":"267","line":958,"column":95,"nodeType":"268","messageId":"269","endLine":958,"endColumn":97},{"ruleId":"266","severity":1,"message":"267","line":958,"column":141,"nodeType":"268","messageId":"269","endLine":958,"endColumn":143},{"ruleId":"255","severity":1,"message":"256","line":965,"column":83,"nodeType":"257","messageId":"258","endLine":965,"endColumn":85},{"ruleId":"255","severity":1,"message":"256","line":1030,"column":27,"nodeType":"257","messageId":"258","endLine":1030,"endColumn":29},{"ruleId":"260","severity":1,"message":"270","line":1068,"column":13,"nodeType":"262","messageId":"263","endLine":1068,"endColumn":17},{"ruleId":"255","severity":1,"message":"256","line":1070,"column":32,"nodeType":"257","messageId":"258","endLine":1070,"endColumn":34},{"ruleId":"271","severity":1,"message":"272","line":1077,"column":35,"nodeType":"273","messageId":"274","endLine":1077,"endColumn":54},{"ruleId":"255","severity":1,"message":"256","line":1089,"column":35,"nodeType":"257","messageId":"258","endLine":1089,"endColumn":37},{"ruleId":"255","severity":1,"message":"256","line":1089,"column":100,"nodeType":"257","messageId":"258","endLine":1089,"endColumn":102},{"ruleId":"255","severity":1,"message":"256","line":1092,"column":40,"nodeType":"257","messageId":"258","endLine":1092,"endColumn":42},{"ruleId":"255","severity":1,"message":"256","line":1092,"column":105,"nodeType":"257","messageId":"258","endLine":1092,"endColumn":107},{"ruleId":"255","severity":1,"message":"256","line":1096,"column":40,"nodeType":"257","messageId":"258","endLine":1096,"endColumn":42},{"ruleId":"255","severity":1,"message":"256","line":1096,"column":89,"nodeType":"257","messageId":"258","endLine":1096,"endColumn":91},{"ruleId":"255","severity":1,"message":"256","line":1096,"column":122,"nodeType":"257","messageId":"258","endLine":1096,"endColumn":124},{"ruleId":"255","severity":1,"message":"256","line":1096,"column":163,"nodeType":"257","messageId":"258","endLine":1096,"endColumn":165},{"ruleId":"255","severity":1,"message":"256","line":1099,"column":40,"nodeType":"257","messageId":"258","endLine":1099,"endColumn":42},{"ruleId":"255","severity":1,"message":"256","line":1102,"column":40,"nodeType":"257","messageId":"258","endLine":1102,"endColumn":42},{"ruleId":"255","severity":1,"message":"256","line":1125,"column":107,"nodeType":"257","messageId":"258","endLine":1125,"endColumn":109},{"ruleId":"255","severity":1,"message":"256","line":1125,"column":142,"nodeType":"257","messageId":"258","endLine":1125,"endColumn":144},{"ruleId":"255","severity":1,"message":"256","line":1128,"column":112,"nodeType":"257","messageId":"258","endLine":1128,"endColumn":114},{"ruleId":"255","severity":1,"message":"256","line":1128,"column":147,"nodeType":"257","messageId":"258","endLine":1128,"endColumn":149},{"ruleId":"255","severity":1,"message":"256","line":1132,"column":115,"nodeType":"257","messageId":"258","endLine":1132,"endColumn":117},{"ruleId":"255","severity":1,"message":"256","line":1132,"column":150,"nodeType":"257","messageId":"258","endLine":1132,"endColumn":152},{"ruleId":"255","severity":1,"message":"256","line":1135,"column":107,"nodeType":"257","messageId":"258","endLine":1135,"endColumn":109},{"ruleId":"255","severity":1,"message":"256","line":1135,"column":142,"nodeType":"257","messageId":"258","endLine":1135,"endColumn":144},{"ruleId":"255","severity":1,"message":"256","line":1138,"column":50,"nodeType":"257","messageId":"258","endLine":1138,"endColumn":52},{"ruleId":"255","severity":1,"message":"256","line":1141,"column":49,"nodeType":"257","messageId":"258","endLine":1141,"endColumn":51},{"ruleId":"255","severity":1,"message":"256","line":64,"column":40,"nodeType":"257","messageId":"258","endLine":64,"endColumn":42},{"ruleId":"255","severity":1,"message":"256","line":70,"column":40,"nodeType":"257","messageId":"258","endLine":70,"endColumn":42},{"ruleId":"255","severity":1,"message":"256","line":75,"column":45,"nodeType":"257","messageId":"258","endLine":75,"endColumn":47},{"ruleId":"255","severity":1,"message":"256","line":81,"column":45,"nodeType":"257","messageId":"258","endLine":81,"endColumn":47},{"ruleId":"255","severity":1,"message":"256","line":86,"column":46,"nodeType":"257","messageId":"258","endLine":86,"endColumn":48},{"ruleId":"255","severity":1,"message":"256","line":92,"column":46,"nodeType":"257","messageId":"258","endLine":92,"endColumn":48},{"ruleId":"255","severity":1,"message":"256","line":106,"column":43,"nodeType":"257","messageId":"258","endLine":106,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":111,"column":43,"nodeType":"257","messageId":"258","endLine":111,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":119,"column":43,"nodeType":"257","messageId":"258","endLine":119,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":123,"column":43,"nodeType":"257","messageId":"258","endLine":123,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":129,"column":43,"nodeType":"257","messageId":"258","endLine":129,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":134,"column":43,"nodeType":"257","messageId":"258","endLine":134,"endColumn":45},{"ruleId":"255","severity":1,"message":"259","line":145,"column":61,"nodeType":"257","messageId":"258","endLine":145,"endColumn":63},{"ruleId":"255","severity":1,"message":"256","line":145,"column":100,"nodeType":"257","messageId":"258","endLine":145,"endColumn":102},{"ruleId":"255","severity":1,"message":"259","line":150,"column":61,"nodeType":"257","messageId":"258","endLine":150,"endColumn":63},{"ruleId":"255","severity":1,"message":"256","line":150,"column":100,"nodeType":"257","messageId":"258","endLine":150,"endColumn":102},{"ruleId":"255","severity":1,"message":"259","line":155,"column":60,"nodeType":"257","messageId":"258","endLine":155,"endColumn":62},{"ruleId":"255","severity":1,"message":"256","line":155,"column":98,"nodeType":"257","messageId":"258","endLine":155,"endColumn":100},{"ruleId":"255","severity":1,"message":"259","line":160,"column":60,"nodeType":"257","messageId":"258","endLine":160,"endColumn":62},{"ruleId":"255","severity":1,"message":"256","line":160,"column":98,"nodeType":"257","messageId":"258","endLine":160,"endColumn":100},{"ruleId":"275","severity":1,"message":"276","line":196,"column":29,"nodeType":"277","endLine":196,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":200,"column":29,"nodeType":"277","endLine":200,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":206,"column":29,"nodeType":"277","endLine":206,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":218,"column":29,"nodeType":"277","endLine":218,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":223,"column":29,"nodeType":"277","endLine":223,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":229,"column":29,"nodeType":"277","endLine":229,"endColumn":76},{"ruleId":"255","severity":1,"message":"256","line":75,"column":31,"nodeType":"257","messageId":"258","endLine":75,"endColumn":33},{"ruleId":"255","severity":1,"message":"256","line":81,"column":32,"nodeType":"257","messageId":"258","endLine":81,"endColumn":34},{"ruleId":"255","severity":1,"message":"256","line":87,"column":33,"nodeType":"257","messageId":"258","endLine":87,"endColumn":35},{"ruleId":"255","severity":1,"message":"256","line":92,"column":38,"nodeType":"257","messageId":"258","endLine":92,"endColumn":40},{"ruleId":"255","severity":1,"message":"256","line":98,"column":37,"nodeType":"257","messageId":"258","endLine":98,"endColumn":39},{"ruleId":"255","severity":1,"message":"256","line":104,"column":36,"nodeType":"257","messageId":"258","endLine":104,"endColumn":38},{"ruleId":"255","severity":1,"message":"256","line":109,"column":37,"nodeType":"257","messageId":"258","endLine":109,"endColumn":39},{"ruleId":"255","severity":1,"message":"256","line":115,"column":39,"nodeType":"257","messageId":"258","endLine":115,"endColumn":41},{"ruleId":"255","severity":1,"message":"256","line":121,"column":38,"nodeType":"257","messageId":"258","endLine":121,"endColumn":40},{"ruleId":"255","severity":1,"message":"256","line":138,"column":43,"nodeType":"257","messageId":"258","endLine":138,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":146,"column":43,"nodeType":"257","messageId":"258","endLine":146,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":152,"column":43,"nodeType":"257","messageId":"258","endLine":152,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":159,"column":43,"nodeType":"257","messageId":"258","endLine":159,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":163,"column":43,"nodeType":"257","messageId":"258","endLine":163,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":167,"column":43,"nodeType":"257","messageId":"258","endLine":167,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":172,"column":43,"nodeType":"257","messageId":"258","endLine":172,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":176,"column":43,"nodeType":"257","messageId":"258","endLine":176,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":180,"column":43,"nodeType":"257","messageId":"258","endLine":180,"endColumn":45},{"ruleId":"255","severity":1,"message":"259","line":186,"column":52,"nodeType":"257","messageId":"258","endLine":186,"endColumn":54},{"ruleId":"255","severity":1,"message":"256","line":186,"column":83,"nodeType":"257","messageId":"258","endLine":186,"endColumn":85},{"ruleId":"255","severity":1,"message":"259","line":191,"column":53,"nodeType":"257","messageId":"258","endLine":191,"endColumn":55},{"ruleId":"255","severity":1,"message":"256","line":191,"column":85,"nodeType":"257","messageId":"258","endLine":191,"endColumn":87},{"ruleId":"255","severity":1,"message":"259","line":196,"column":54,"nodeType":"257","messageId":"258","endLine":196,"endColumn":56},{"ruleId":"255","severity":1,"message":"256","line":196,"column":87,"nodeType":"257","messageId":"258","endLine":196,"endColumn":89},{"ruleId":"255","severity":1,"message":"259","line":203,"column":51,"nodeType":"257","messageId":"258","endLine":203,"endColumn":53},{"ruleId":"255","severity":1,"message":"256","line":203,"column":82,"nodeType":"257","messageId":"258","endLine":203,"endColumn":84},{"ruleId":"255","severity":1,"message":"259","line":208,"column":52,"nodeType":"257","messageId":"258","endLine":208,"endColumn":54},{"ruleId":"255","severity":1,"message":"256","line":208,"column":85,"nodeType":"257","messageId":"258","endLine":208,"endColumn":87},{"ruleId":"255","severity":1,"message":"259","line":213,"column":53,"nodeType":"257","messageId":"258","endLine":213,"endColumn":55},{"ruleId":"255","severity":1,"message":"256","line":213,"column":85,"nodeType":"257","messageId":"258","endLine":213,"endColumn":87},{"ruleId":"275","severity":1,"message":"276","line":244,"column":29,"nodeType":"277","endLine":244,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":249,"column":29,"nodeType":"277","endLine":249,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":255,"column":29,"nodeType":"277","endLine":255,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":267,"column":29,"nodeType":"277","endLine":267,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":273,"column":29,"nodeType":"277","endLine":273,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":279,"column":29,"nodeType":"277","endLine":279,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":292,"column":29,"nodeType":"277","endLine":292,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":300,"column":29,"nodeType":"277","endLine":300,"endColumn":76},{"ruleId":"275","severity":1,"message":"276","line":306,"column":29,"nodeType":"277","endLine":306,"endColumn":76},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","@typescript-eslint/no-unused-vars","'typeOf' is defined but never used.","Identifier","unusedVar","'BoxContainer' is defined but never used.","'LinkList' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'date' is assigned a value but never used.","no-self-assign","'booking.QueueNumber' is assigned to itself.","MemberExpression","selfAssignment","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]