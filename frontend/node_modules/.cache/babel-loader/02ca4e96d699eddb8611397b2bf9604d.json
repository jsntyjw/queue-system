{"ast":null,"code":"var _jsxFileName = \"/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/ServiceCounter.tsx\";\nimport React from 'react';\nimport '../App.css';\nimport { Text, Button, Layout, Breadcrumb, BoxContainer, InputSelect, Modal } from 'react-lifesg-design-system';\nimport styled from \"styled-components\";\nimport Booking from \"../models/booking\";\nimport { ModalContent } from \"../models/doc-elements\";\nimport BaseService from '../service/base.service';\nconst StyledSection = styled(Layout.Section)`\n    margin-top: 8%;\n    min-height: 600px;\n`;\n\nclass ServiceCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      _bookingId: \"\",\n      nric: \"\",\n      citizenName: \"\",\n      citizenNumber: \"\",\n      citizenEmail: \"\",\n      inputValue: \"\",\n      queueNumber: \"\",\n      showModal: false,\n      citizenSalutation: \"\",\n      generalType: \"\",\n      serviceName: \"\",\n      serviceProviderEmail: \"\",\n      serviceProviderName: \"\",\n      serviceStartDate: \"\",\n      serviceProviderPhone: \"\",\n      serviceStartTime: \"\",\n      serviceProviderLocation: \"\",\n      bookingStatus: \"\"\n    };\n    this.consumeQueue = this.consumeQueue.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(StyledSection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Base, {\n      show: this.state.showModal,\n      animationFrom: \"bottom\",\n      enableOverlayClick: true // onOverlayClick={closeModal()}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Box, {\n      onClose: () => {\n        this.setState({\n          showModal: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ModalContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, \"Send to queue succesfully\")))), /*#__PURE__*/React.createElement(Layout.Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      links: [{\n        title: 'Home',\n        url: 'http://localhost:3000/ServiceCounter'\n      }, {\n        title: 'Service Counter'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"divButtonNextPatient\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"divLocation\",\n      className: \"inlinecontent\",\n      style: {\n        justifyItems: \"start\",\n        maxWidth: '400px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InputSelect, {\n      options: [{\n        value: \"Doctor\",\n        label: \"Doctor\",\n        selected: true\n      }, {\n        value: \"Payment\",\n        label: \"Payment\"\n      }, {\n        value: \"Medication\",\n        label: \"Medication\"\n      }],\n      valueExtractor: item => item.value,\n      listExtractor: item => item.label,\n      defaultValue: \"Doctor\",\n      displayValueExtractor: item => item.label,\n      placeholder: \"Select your work\",\n      onSelectItem: (item, selectedValue) => {\n        this.setState({\n          inputValue: selectedValue\n        }, () => {// this.searchByLocation(selectedValue)\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button.Default, {\n      className: \"buttonsuccess\",\n      onClick: () => this.consumeQueue(this.handle200, \"nextPatient\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }, \"Next Number\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"divCurrentCitizen\",\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Layout.GridContainer, {\n      className: \"column2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Text.H3, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 33\n      }\n    }, \"Currently Serving\"), /*#__PURE__*/React.createElement(Text.H5, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 33\n      }\n    }, \"Current Queue Number : \", this.state.queueNumber), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(BoxContainer, {\n      title: \"Citizen Information\",\n      collapsible: false,\n      className: \"textleft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: \"2rem\",\n        minWidth: \"1080px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Layout.GridContainer, {\n      className: \"column4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Text.Body, {\n      weight: \"semibold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 45\n      }\n    }, \"NRIC\"), /*#__PURE__*/React.createElement(Text.Body, {\n      weight: \"semibold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 45\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(Text.Body, {\n      weight: \"semibold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 45\n      }\n    }, \"Phone Number\"), /*#__PURE__*/React.createElement(Text.Body, {\n      weight: \"semibold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 45\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Text.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 45\n      }\n    }, this.state.nric), /*#__PURE__*/React.createElement(Text.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 45\n      }\n    }, this.state.citizenName), /*#__PURE__*/React.createElement(Text.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 45\n      }\n    }, this.state.citizenNumber), /*#__PURE__*/React.createElement(Text.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 45\n      }\n    }, this.state.citizenEmail)))), /*#__PURE__*/React.createElement(Text.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 33\n      }\n    }, \"Next service: \"))), /*#__PURE__*/React.createElement(Layout.GridContainer, {\n      className: \"column4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(InputSelect, {\n      placeholder: \"Select\",\n      options: [{\n        value: \"payment\",\n        label: \"Payment\"\n      }, {\n        value: \"pharmacy\",\n        label: \"Pharmacy\"\n      }],\n      valueExtractor: item => item.value,\n      listExtractor: item => item.label,\n      displayValueExtractor: item => item.label,\n      onSelectItem: (item, selectedValue) => {\n        this.setState({\n          inputValue: selectedValue\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button.Default, {\n      onClick: () => this.consumeQueue(this.handle200, \"sendtoNextService\", this.state._bookingId, this.state.nric, this.state.citizenName, this.state.citizenEmail, this.state.citizenNumber, this.state.queueNumber),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    }, \"Send to next service\"))));\n  }\n\n  handle200(response) {\n    console.log('handle200 has received:', response);\n  }\n\n  consumeQueue(callback, buttonSelected, bookingId, nric, citizenName, citizenEmail, citizenNumber, queueNumber) {\n    var respectiveURL = \"\";\n\n    if (buttonSelected == \"nextPatient\") {\n      respectiveURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/receiver?queueName=doctorQueue\";\n    }\n\n    if (buttonSelected == \"sendtoNextService\") {\n      const queueObject = {\n        \"_id\": bookingId,\n        \"nric\": nric,\n        \"citizenName\": citizenName,\n        \"citizenEmail\": citizenEmail,\n        \"citizenNumber\": citizenNumber,\n        \"queueNumber\": queueNumber\n      };\n      var myJSON = encodeURI(JSON.stringify(queueObject));\n      respectiveURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + bookingId + \"&exchangeID=master&bindingKey=sgh.doctor&bookingDetails=\" + myJSON;\n    }\n\n    const xhr = new XMLHttpRequest(),\n          method = \"GET\",\n          url = respectiveURL; // initialize a new GET request\n\n    xhr.open(method, url, true); // respond to every readyState change\n\n    xhr.onreadystatechange = () => {\n      // ignore all readyStates other than \"DONE\"\n      if (xhr.readyState !== XMLHttpRequest.DONE) {\n        console.log(XMLHttpRequest);\n        return;\n      } // call the callback with status\n\n\n      if (xhr.status === 200) {\n        var calledBooking;\n\n        if (buttonSelected == \"nextPatient\") {\n          this.setState({\n            _bookingId: JSON.parse(xhr.responseText)._id,\n            nric: JSON.parse(xhr.responseText).nric,\n            citizenName: JSON.parse(xhr.responseText).citizenName,\n            citizenEmail: JSON.parse(xhr.responseText).citizenEmail,\n            citizenNumber: JSON.parse(xhr.responseText).citizenNumber,\n            citizenSalutation: JSON.parse(xhr.responseText).citizenSalutation,\n            queueNumber: JSON.parse(xhr.responseText).queueNumber,\n            generalType: JSON.parse(xhr.responseText).generalType,\n            serviceName: JSON.parse(xhr.responseText).serviceName,\n            serviceProviderEmail: JSON.parse(xhr.responseText).serviceProviderEmail,\n            serviceProviderName: JSON.parse(xhr.responseText).serviceProviderName,\n            serviceStartDate: JSON.parse(xhr.responseText).serviceStartDate,\n            serviceProviderPhone: JSON.parse(xhr.responseText).serviceProviderPhone,\n            serviceStartTime: JSON.parse(xhr.responseText).serviceStartTime,\n            serviceProviderLocation: JSON.parse(xhr.responseText).serviceProviderLocation,\n            bookingStatus: JSON.parse(xhr.responseText).bookingStatus\n          });\n          calledBooking = new Booking(this.state._bookingId, this.state.nric, this.state.citizenName, this.state.citizenSalutation, this.state.citizenEmail, this.state.citizenNumber, this.state.generalType, this.state.serviceName, this.state.serviceProviderName, this.state.serviceProviderEmail, this.state.serviceProviderPhone, this.state.serviceStartDate, this.state.serviceStartTime, this.state.serviceProviderLocation, this.state.bookingStatus, this.state.queueNumber);\n          document.getElementById(\"divCurrentCitizen\").style.display = \"block\";\n          document.getElementById(\"divButtonNextPatient\").style.display = \"none\";\n          calledBooking.BookingStatus = \"Doctor\";\n          BaseService.update(\"/booking/update/\", this.state._bookingId, calledBooking).then(rp => {\n            if (rp.Status) {\n              console.log('Booking saved.');\n            } else {\n              console.log(rp.Messages);\n              console.log(\"Messages: \" + rp.Messages);\n              console.log(\"Exception: \" + rp.Exception);\n            }\n          });\n        }\n\n        if (buttonSelected == \"sendtoNextService\") {\n          this.setState({\n            showModal: true\n          });\n          calledBooking = new Booking(this.state._bookingId, this.state.nric, this.state.citizenName, this.state.citizenSalutation, this.state.citizenEmail, this.state.citizenNumber, this.state.generalType, this.state.serviceName, this.state.serviceProviderName, this.state.serviceProviderEmail, this.state.serviceProviderPhone, this.state.serviceStartDate, this.state.serviceStartTime, this.state.serviceProviderLocation, this.state.bookingStatus, this.state.queueNumber);\n          document.getElementById(\"divCurrentCitizen\").style.display = \"none\";\n          document.getElementById(\"divButtonNextPatient\").style.display = \"block\";\n          calledBooking.BookingStatus = \"Payment\";\n          BaseService.update(\"/booking/update/\", this.state._bookingId, calledBooking).then(rp => {\n            if (rp.Status) {\n              console.log('Booking saved.');\n            } else {\n              console.log(rp.Messages);\n              console.log(\"Messages: \" + rp.Messages);\n              console.log(\"Exception: \" + rp.Exception);\n            }\n          });\n        } // console.log(JSON.parse(xhr.responseText));\n\n\n        return callback(xhr.status);\n      } // got something other than 200,\n      // re-initialize and send another GET request\n\n\n      xhr.open(method, url, true);\n      xhr.send();\n    }; // send the initial GET request\n\n\n    xhr.send();\n  }\n\n}\n\nexport default ServiceCounter;","map":{"version":3,"sources":["/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/ServiceCounter.tsx"],"names":["React","Text","Button","Layout","Breadcrumb","BoxContainer","InputSelect","Modal","styled","Booking","ModalContent","BaseService","StyledSection","Section","ServiceCounter","Component","constructor","props","state","_bookingId","nric","citizenName","citizenNumber","citizenEmail","inputValue","queueNumber","showModal","citizenSalutation","generalType","serviceName","serviceProviderEmail","serviceProviderName","serviceStartDate","serviceProviderPhone","serviceStartTime","serviceProviderLocation","bookingStatus","consumeQueue","bind","render","setState","title","url","justifyItems","maxWidth","value","label","selected","item","selectedValue","handle200","display","padding","minWidth","response","console","log","callback","buttonSelected","bookingId","respectiveURL","queueObject","myJSON","encodeURI","JSON","stringify","xhr","XMLHttpRequest","method","open","onreadystatechange","readyState","DONE","status","calledBooking","parse","responseText","_id","document","getElementById","style","BookingStatus","update","then","rp","Status","Messages","Exception","send"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport {\n    Text,\n    Button,\n    Layout,\n    Breadcrumb,\n    BoxContainer,\n    InputSelect,\n    Modal\n} from 'react-lifesg-design-system';\nimport styled from \"styled-components\";\n\nimport Booking from \"../models/booking\";\n\n\nimport { ModalContent } from \"../models/doc-elements\";\nimport BaseService from '../service/base.service';\n\n\ninterface Props {\n    onChange: (fieldName: string, value: string) => void;\n    onSave: () => void;\n}\n\nconst StyledSection = styled(Layout.Section)`\n    margin-top: 8%;\n    min-height: 600px;\n`;\n\ninterface MyState {\n    _bookingId: string,\n    nric: string,\n    citizenName: string,\n    citizenNumber: string,\n    citizenEmail: string,\n    inputValue: string,\n    queueNumber: string,\n    showModal: boolean,\n    citizenSalutation: string,\n    generalType: string,\n    serviceName: string,\n    serviceProviderEmail: string,\n    serviceProviderName: string,\n    serviceStartDate: string,\n    serviceProviderPhone: string,\n    serviceStartTime: string,\n    serviceProviderLocation: string,\n    bookingStatus: string\n}\n\n\n\nclass ServiceCounter extends React.Component<{}, MyState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            _bookingId: \"\",\n            nric: \"\",\n            citizenName: \"\",\n            citizenNumber: \"\",\n            citizenEmail: \"\",\n            inputValue: \"\",\n            queueNumber: \"\",\n            showModal: false,\n            citizenSalutation: \"\",\n            generalType: \"\",\n            serviceName: \"\",\n            serviceProviderEmail: \"\",\n            serviceProviderName: \"\",\n            serviceStartDate: \"\",\n            serviceProviderPhone: \"\",\n            serviceStartTime: \"\",\n            serviceProviderLocation: \"\",\n            bookingStatus: \"\"\n        };\n\n        this.consumeQueue = this.consumeQueue.bind(this)\n\n    }\n\n    render() {\n        return (\n            <StyledSection>\n\n                <Modal.Base\n                    show={this.state.showModal}\n                    animationFrom=\"bottom\"\n                    enableOverlayClick={true}\n                // onOverlayClick={closeModal()}\n                >\n                    <Modal.Box onClose={() => {\n                        this.setState({\n                            showModal: false\n                        });\n                    }}>\n                        <ModalContent>\n                            <span>Send to queue succesfully</span>\n                        </ModalContent>\n                    </Modal.Box>\n                </Modal.Base>\n                <Layout.Container>\n\n                \n                    <Breadcrumb links={[{ title: 'Home', url: 'http://localhost:3000/ServiceCounter' }, { title: 'Service Counter' }]} />\n\n                    <div id='divButtonNextPatient'>\n\n                    <div id='divLocation' className=\"inlinecontent\" style={{ justifyItems: \"start\", maxWidth: '400px' }}>\n                            <InputSelect\n                                options={[\n                                    { value: \"Doctor\", label: \"Doctor\", selected: true },\n                                    { value: \"Payment\", label: \"Payment\" },\n                                    { value: \"Medication\", label: \"Medication\" },\n\n                                ]}\n\n                                valueExtractor={(item) => item.value}\n                                listExtractor={(item) => item.label}\n                                defaultValue={\"Doctor\"}\n                                displayValueExtractor={(item) => item.label}\n                                placeholder=\"Select your work\"\n                                onSelectItem={(item, selectedValue) => {\n                                    this.setState({ inputValue: selectedValue }, () => {\n                                        // this.searchByLocation(selectedValue)\n                                    });\n                                }} />\n\n                        </div>\n\n                        <br></br>\n                        <Button.Default className='buttonsuccess'\n                            onClick={() => this.consumeQueue(this.handle200, \"nextPatient\")}\n                        >Next Number</Button.Default>\n\n                    </div>\n                    <div id='divCurrentCitizen' style={{ display: 'none' }}>\n\n                        <Layout.GridContainer className=\"column2\">\n                            <div>\n                                <div className='spacer1'></div>\n\n                                <Text.H3>Currently Serving</Text.H3>\n\n                                <Text.H5>Current Queue Number : {this.state.queueNumber}</Text.H5>\n                                <div className='spacer1'></div>\n                                <div className='spacer1'></div>\n\n                                <BoxContainer title=\"Citizen Information\" collapsible={false} className=\"textleft\" >\n                                    <div style={{ padding: \"2rem\", minWidth: \"1080px\" }}>\n                                        <Layout.GridContainer className=\"column4\">\n                                            <Text.Body weight=\"semibold\">NRIC</Text.Body>\n                                            <Text.Body weight=\"semibold\">Name</Text.Body>\n                                            <Text.Body weight=\"semibold\">Phone Number</Text.Body>\n                                            <Text.Body weight=\"semibold\">Email</Text.Body>\n                                            <Text.Body>{this.state.nric}</Text.Body>\n                                            <Text.Body>{this.state.citizenName}</Text.Body>\n                                            <Text.Body>{this.state.citizenNumber}</Text.Body>\n                                            <Text.Body>{this.state.citizenEmail}</Text.Body>\n                                        </Layout.GridContainer>\n                                    </div>\n                                </BoxContainer>\n\n\n                                <Text.Body>Next service: </Text.Body>\n\n\n                            </div>\n\n                        </Layout.GridContainer>\n\n\n                        <Layout.GridContainer className=\"column4\">\n\n                            <InputSelect\n                                placeholder=\"Select\"\n                                options={[\n                                    { value: \"payment\", label: \"Payment\" },\n                                    { value: \"pharmacy\", label: \"Pharmacy\" }\n                                ]}\n                                valueExtractor={(item) => item.value}\n                                listExtractor={(item) => item.label}\n                                displayValueExtractor={(item) => item.label}\n                                onSelectItem={(item, selectedValue) => {\n\n                                    this.setState({\n                                        inputValue: selectedValue\n                                    })\n                                }}\n                            />\n                        </Layout.GridContainer>\n\n\n                        <div className='spacer1'></div>\n\n\n                        <Button.Default\n                            onClick={() => this.consumeQueue(this.handle200, \"sendtoNextService\", this.state._bookingId, this.state.nric, this.state.citizenName, this.state.citizenEmail, this.state.citizenNumber, this.state.queueNumber)}\n\n                        >Send to next service</Button.Default>\n\n                    </div>\n\n                </Layout.Container>\n            </StyledSection>\n        )\n    }\n\n\n    handle200(response) {\n        console.log('handle200 has received:', response);\n    }\n\n\n\n    consumeQueue(callback, buttonSelected: string, bookingId?: string, nric?: string, citizenName?: string, citizenEmail?: string, citizenNumber?: string, queueNumber?: string) {\n\n        var respectiveURL = \"\"\n        if (buttonSelected == \"nextPatient\") {\n\n            respectiveURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/receiver?queueName=doctorQueue\"\n\n        }\n        if (buttonSelected == \"sendtoNextService\") {\n\n            const queueObject = {\n                \"_id\": bookingId,\n                \"nric\": nric,\n                \"citizenName\": citizenName,\n                \"citizenEmail\": citizenEmail,\n                \"citizenNumber\": citizenNumber,\n                \"queueNumber\": queueNumber,\n            }\n\n            var myJSON = encodeURI(JSON.stringify(queueObject));\n            respectiveURL = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + bookingId + \"&exchangeID=master&bindingKey=sgh.doctor&bookingDetails=\" + myJSON;\n\n        }\n\n\n\n        const xhr = new XMLHttpRequest(),\n            method = \"GET\",\n            url = respectiveURL;\n        // initialize a new GET request\n        xhr.open(method, url, true);\n\n        // respond to every readyState change\n        xhr.onreadystatechange = () => {\n\n            // ignore all readyStates other than \"DONE\"\n            if (xhr.readyState !== XMLHttpRequest.DONE) { console.log(XMLHttpRequest); return; }\n\n            // call the callback with status\n            if (xhr.status === 200) {\n\n                var calledBooking: Booking;\n                if (buttonSelected == \"nextPatient\") {\n                    this.setState({\n                        _bookingId: JSON.parse(xhr.responseText)._id,\n                        nric: JSON.parse(xhr.responseText).nric,\n                        citizenName: JSON.parse(xhr.responseText).citizenName,\n                        citizenEmail: JSON.parse(xhr.responseText).citizenEmail,\n                        citizenNumber: JSON.parse(xhr.responseText).citizenNumber,\n                        citizenSalutation: JSON.parse(xhr.responseText).citizenSalutation,\n                        queueNumber: JSON.parse(xhr.responseText).queueNumber,\n                        generalType: JSON.parse(xhr.responseText).generalType,\n\n                        serviceName: JSON.parse(xhr.responseText).serviceName,\n\n                        serviceProviderEmail: JSON.parse(xhr.responseText).serviceProviderEmail,\n                        serviceProviderName: JSON.parse(xhr.responseText).serviceProviderName,\n                        serviceStartDate: JSON.parse(xhr.responseText).serviceStartDate,\n                        serviceProviderPhone: JSON.parse(xhr.responseText).serviceProviderPhone,\n                        serviceStartTime: JSON.parse(xhr.responseText).serviceStartTime,\n                        serviceProviderLocation: JSON.parse(xhr.responseText).serviceProviderLocation,\n                        bookingStatus: JSON.parse(xhr.responseText).bookingStatus,\n                    })\n\n\n                    calledBooking = new Booking(this.state._bookingId, this.state.nric, this.state.citizenName, this.state.citizenSalutation, this.state.citizenEmail, this.state.citizenNumber, this.state.generalType, this.state.serviceName, this.state.serviceProviderName, this.state.serviceProviderEmail, this.state.serviceProviderPhone, this.state.serviceStartDate, this.state.serviceStartTime, this.state.serviceProviderLocation, this.state.bookingStatus, this.state.queueNumber);\n\n                    document.getElementById(\"divCurrentCitizen\")!!.style.display = \"block\";\n                    document.getElementById(\"divButtonNextPatient\")!!.style.display = \"none\";\n                    calledBooking.BookingStatus = \"Doctor\"\n\n                    BaseService.update<Booking>(\"/booking/update/\", this.state._bookingId, calledBooking).then(\n\n                        (rp) => {\n                            if (rp.Status) {\n                                console.log('Booking saved.');\n                            } else {\n                                console.log(rp.Messages);\n                                console.log(\"Messages: \" + rp.Messages);\n                                console.log(\"Exception: \" + rp.Exception);\n                            }\n                        }\n                    );\n\n                }\n\n                if (buttonSelected == \"sendtoNextService\") {\n                    this.setState({\n                        showModal: true\n                    });\n\n                    calledBooking = new Booking(this.state._bookingId, this.state.nric, this.state.citizenName, this.state.citizenSalutation, this.state.citizenEmail, this.state.citizenNumber, this.state.generalType, this.state.serviceName, this.state.serviceProviderName, this.state.serviceProviderEmail, this.state.serviceProviderPhone, this.state.serviceStartDate, this.state.serviceStartTime, this.state.serviceProviderLocation, this.state.bookingStatus, this.state.queueNumber);\n\n\n                    document.getElementById(\"divCurrentCitizen\")!!.style.display = \"none\";\n                    document.getElementById(\"divButtonNextPatient\")!!.style.display = \"block\";\n\n\n                    calledBooking.BookingStatus = \"Payment\"\n\n                    BaseService.update<Booking>(\"/booking/update/\", this.state._bookingId, calledBooking).then(\n\n                        (rp) => {\n                            if (rp.Status) {\n                                console.log('Booking saved.');\n                            } else {\n                                console.log(rp.Messages);\n                                console.log(\"Messages: \" + rp.Messages);\n                                console.log(\"Exception: \" + rp.Exception);\n                            }\n                        }\n                    );\n\n                }\n\n\n\n                // console.log(JSON.parse(xhr.responseText));\n\n                return callback(xhr.status);\n            }\n\n            // got something other than 200,\n            // re-initialize and send another GET request\n            xhr.open(method, url, true);\n            xhr.send();\n        }\n\n        // send the initial GET request\n        xhr.send();\n    }\n\n\n}\n\nexport default ServiceCounter;\n"]},"metadata":{},"sourceType":"module"}