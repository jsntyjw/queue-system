{"ast":null,"code":"import React from 'react';\nimport '../App.css';\nimport { Layout } from 'react-lifesg-design-system';\nimport styled from \"styled-components\";\nimport Booking from \"../models/booking\";\nconst StyledContainer = styled(Layout.GridContainer)`\n    grid-template-rows: 1fr;\n    grid-template-columns: 12fr;\n    grid-template-areas:\n        \"title\"\n        \"button \"\n        \"queue\";\n    grid-gap: 0.25rem;\n    grid-row-gap: 16px;\n`;\nconst StyledSection = styled(Layout.Section)`\n    margin-top: 8%;\n    min-height: 600px;\n`;\nconst Main = styled.main`\n  color: white;\n  grid-area: queue;\n  padding: 0.25rem;\n`;\n\nclass ViewAllBookings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bookings: []\n    };\n    this.searchByLocation = this.searchByLocation.bind(this);\n  }\n\n  async searchByLocation(searchMethod) {\n    var apiURL;\n    apiURL = process.env.REACT_APP_MY_EC2_API_ADDRESS + 'api/booking/citizen/';\n    document.getElementById(\"divAppointments\").style.display = \"block\";\n    fetch(apiURL).then(function (response) {\n      return response.json();\n    }).then(myJson => {\n      this.state.bookings.length = 0;\n      myJson.data.forEach(element => {\n        var eachBooking = new Booking(element[\"_id\"], element[\"nric\"], element[\"citizenName\"], element[\"citizenSalutation\"], element[\"citizenEmail\"], element[\"citizenNumber\"], element[\"serviceName\"], element[\"serviceProviderName\"], element[\"serviceProviderEmail\"], element[\"serviceProviderPhone\"], element[\"serviceStartDate\"], element[\"serviceStartTime\"], element[\"serviceProviderLocation\"], element[\"bookingStatus\"]); // const bookings = this.state.bookings.slice(0);\n\n        this.state.bookings.push(eachBooking); // console.log(bookings)\n\n        this.setState({\n          bookings: this.state.bookings\n        });\n      });\n    });\n  }\n\n  render() {}\n\n  handle200(response) {\n    console.log('handle200 has received:', response);\n  }\n\n  checkPage(callback, bookingId, nric, citizenName, citizenEmail, citizenNumber) {\n    const queueObject = {\n      \"_id\": bookingId,\n      \"nric\": nric,\n      \"citizenName\": citizenName,\n      \"citizenEmail\": citizenEmail,\n      \"citizenNumber\": citizenNumber\n    };\n    const myJSON = encodeURI(JSON.stringify(queueObject));\n    const xhr = new XMLHttpRequest(),\n          method = \"GET\",\n          url = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + bookingId + \"&exchangeID=hospital&bindingKey=doctor&bookingDetails=\" + myJSON; // initialize a new GET request\n\n    xhr.open(method, url, true); // respond to every readyState change\n\n    xhr.onreadystatechange = () => {\n      // ignore all readyStates other than \"DONE\"\n      if (xhr.readyState !== XMLHttpRequest.DONE) {\n        return;\n      } // call the callback with status\n\n\n      if (xhr.status === 200) {\n        this.setState({\n          showModal: true\n        });\n        return callback(xhr.status);\n      } // got something other than 200,\n      // re-initialize and send another GET request\n\n\n      xhr.open(method, url, true);\n      xhr.send();\n    }; // send the initial GET request\n\n\n    xhr.send();\n  }\n\n  updateInputValue(evt) {\n    const val = evt.target.value;\n    this.setState({\n      inputValue: val\n    });\n  }\n\n}\n\nexport default ViewAllBookings; // function closeModalFn(): (() => void) | undefined {\n//     throw new Error('Function not implemented.');\n// }\n// const [show, setShow ] = useState(false)\n// function closeModal(): (() => void) | undefined {\n//     document.getElementById(\"divModal\")!!.style.display = \"none\";\n//     throw new Error('Function not implemented.');\n// }\n// call checkPage once","map":{"version":3,"sources":["/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/components/ViewAllBookings.tsx"],"names":["React","Layout","styled","Booking","StyledContainer","GridContainer","StyledSection","Section","Main","main","ViewAllBookings","Component","constructor","props","state","bookings","searchByLocation","bind","searchMethod","apiURL","process","env","REACT_APP_MY_EC2_API_ADDRESS","document","getElementById","style","display","fetch","then","response","json","myJson","length","data","forEach","element","eachBooking","push","setState","render","handle200","console","log","checkPage","callback","bookingId","nric","citizenName","citizenEmail","citizenNumber","queueObject","myJSON","encodeURI","JSON","stringify","xhr","XMLHttpRequest","method","url","open","onreadystatechange","readyState","DONE","status","showModal","send","updateInputValue","evt","val","target","value","inputValue"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport '../App.css';\nimport { Text, Button, Layout, BoxContainer, Breadcrumb, InputGroup, Accordion, InputSelect, Modal, RadioButton, } from 'react-lifesg-design-system';\nimport styled from \"styled-components\";\nimport Booking from \"../models/booking\";\n\nimport { Container, Label, ModalContent, OptionContainer } from \"../models/doc-elements\";\n\n\nconst StyledContainer = styled(Layout.GridContainer)`\n    grid-template-rows: 1fr;\n    grid-template-columns: 12fr;\n    grid-template-areas:\n        \"title\"\n        \"button \"\n        \"queue\";\n    grid-gap: 0.25rem;\n    grid-row-gap: 16px;\n`;\n\nconst StyledSection = styled(Layout.Section)`\n    margin-top: 8%;\n    min-height: 600px;\n`;\n\nconst Main = styled.main`\n  color: white;\n  grid-area: queue;\n  padding: 0.25rem;\n`;\n\ninterface MyState {\n    bookings: Booking[]\n}\n\n\n\n\nclass ViewAllBookings extends React.Component<{}, MyState> {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            bookings: []\n\n\n        };\n        this.searchByLocation = this.searchByLocation.bind(this)\n    }\n\n    public async searchByLocation(searchMethod: string) {\n\n        var apiURL: string\n\n            apiURL = process.env.REACT_APP_MY_EC2_API_ADDRESS + 'api/booking/citizen/';\n            document.getElementById(\"divAppointments\")!!.style.display = \"block\";\n\n\n        fetch(apiURL)\n            .then(function (response) {\n                \n                return response.json();\n            })\n            .then((myJson) => {\n                this.state.bookings.length = 0;\n                myJson.data.forEach(element => {\n                    var eachBooking = new Booking(\n                        element[\"_id\"],\n                        element[\"nric\"],\n                        element[\"citizenName\"],\n                        element[\"citizenSalutation\"],\n                        element[\"citizenEmail\"],\n                        element[\"citizenNumber\"],\n                        element[\"serviceName\"],\n                        element[\"serviceProviderName\"],\n                        element[\"serviceProviderEmail\"],\n                        element[\"serviceProviderPhone\"],\n                        element[\"serviceStartDate\"],\n                        element[\"serviceStartTime\"],\n                        element[\"serviceProviderLocation\"],\n                        element[\"bookingStatus\"]\n                    );\n\n                    \n                    // const bookings = this.state.bookings.slice(0);\n                    this.state.bookings.push(eachBooking)\n                    // console.log(bookings)\n\n                    this.setState({\n                        bookings: this.state.bookings,\n                    });\n\n                });\n            });\n    }\n\n    render() {\n\n\n       \n    }\n\n    handle200(response) {\n        console.log('handle200 has received:', response);\n    }\n\n    checkPage(callback, bookingId: string, nric: string, citizenName: string, citizenEmail: string, citizenNumber: string) {\n        const queueObject = {\n            \"_id\": bookingId,\n            \"nric\": nric,\n            \"citizenName\": citizenName,\n            \"citizenEmail\": citizenEmail,\n            \"citizenNumber\": citizenNumber\n        }\n\n        const myJSON = encodeURI(JSON.stringify(queueObject));\n\n\n        const xhr = new XMLHttpRequest(),\n            method = \"GET\",\n            url = \"https://hyxfimzf9g.execute-api.us-east-1.amazonaws.com/default/sender?bookingID=\" + bookingId + \"&exchangeID=hospital&bindingKey=doctor&bookingDetails=\" + myJSON;\n        // initialize a new GET request\n        xhr.open(method, url, true);\n\n        // respond to every readyState change\n        xhr.onreadystatechange = () => {\n\n            // ignore all readyStates other than \"DONE\"\n            if (xhr.readyState !== XMLHttpRequest.DONE) { return; }\n\n            // call the callback with status\n            if (xhr.status === 200) {\n                this.setState({\n                    showModal: true\n                });\n                return callback(xhr.status);\n            }\n\n            // got something other than 200,\n            // re-initialize and send another GET request\n            xhr.open(method, url, true);\n            xhr.send();\n        }\n\n        // send the initial GET request\n        xhr.send();\n    }\n\n    updateInputValue(evt) {\n        const val = evt.target.value;\n        this.setState({\n            inputValue: val\n        });\n    }\n}\n\nexport default ViewAllBookings;\n\n\n\n\n\n\n// function closeModalFn(): (() => void) | undefined {\n//     throw new Error('Function not implemented.');\n// }\n// const [show, setShow ] = useState(false)\n// function closeModal(): (() => void) | undefined {\n//     document.getElementById(\"divModal\")!!.style.display = \"none\";\n//     throw new Error('Function not implemented.');\n// }\n// call checkPage once\n\n"]},"metadata":{},"sourceType":"module"}