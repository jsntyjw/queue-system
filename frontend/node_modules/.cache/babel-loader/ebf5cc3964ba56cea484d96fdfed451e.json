{"ast":null,"code":"import Response from \"../models/response\";\nimport axios from \"axios\";\nexport default class BaseService {\n  // private static baseURL: string = \"https://sal-react-demo-server.herokuapp.com/api\";\n  static async getAll(url) {\n    let res = await axios.get(this.baseURL + url).then(response => {\n      const result = response.data;\n\n      if (result && result.success) {\n        return new Response(true, result.data, \"Success\", \"\");\n      } else {\n        const msg = result.messageList && result.messageList.length > 0 ? result.messageList[0].text : \"Error\";\n        return new Response(false, null, \"Error\", msg);\n      }\n    }).catch(function (error) {\n      return new Response(false, null, \"Error\", error);\n    });\n    return res;\n  }\n\n  static get(url, param) {\n    let res = axios.get(this.baseURL + url + param).then(response => {\n      const result = response.data;\n\n      if (result && result.success) {\n        return new Response(true, result.data, \"Success\", \"\");\n      } else {\n        const msg = result.messageList && result.messageList.length > 0 ? result.messageList[0].text : \"Error\";\n        return new Response(false, null, \"Error\", msg);\n      }\n    }).catch(function (error) {\n      return new Response(false, null, \"Error\", error);\n    });\n    return res;\n  }\n\n  static delete(url, param) {\n    console.log(param);\n    let res = axios.delete(this.baseURL + url, {\n      data: param\n    }).then(response => {\n      const result = response.data;\n\n      if (result && result.success) {\n        return new Response(true, result.data, \"Success\", \"\");\n      } else {\n        const msg = result.messageList && result.messageList.length > 0 ? result.messageList[0].text : \"Error\";\n        return new Response(false, null, \"Error\", msg);\n      }\n    }).catch(function (error) {\n      return new Response(false, null, \"Error\", error);\n    });\n    return res;\n  }\n\n  static create(url, obj) {\n    let res = axios.post(this.baseURL + url, obj).then(response => {\n      const result = response.data;\n\n      if (result && result.success) {\n        return new Response(true, result.data, \"Success\", \"\");\n      } else {\n        const msg = result.messageList && result.messageList.length > 0 ? result.messageList[0].text : \"Error\";\n        return new Response(false, null, \"Error\", msg);\n      }\n    }).catch(function (error) {\n      return new Response(false, null, \"Error\", error);\n    });\n    return res;\n  }\n\n  static update(url, param, obj) {\n    let res = axios.post(this.baseURL + url + param, obj).then(response => {\n      const result = response.data;\n\n      if (result && result.success) {\n        return new Response(true, result.data, \"Success\", \"\");\n      } else {\n        const msg = result.messageList && result.messageList.length > 0 ? result.messageList[0].text : \"Error\";\n        return new Response(false, null, \"Error\", msg);\n      }\n    }).catch(function (error) {\n      return new Response(false, null, \"Error\", error);\n      ;\n    });\n    return res;\n  }\n\n}\nBaseService.baseURL = \"http://localhost:3001/api\";","map":{"version":3,"sources":["/Users/jeffrey/Documents/GitHub/queue-system/frontend/src/service/base.service.tsx"],"names":["Response","axios","BaseService","getAll","url","res","get","baseURL","then","response","result","data","success","msg","messageList","length","text","catch","error","param","delete","console","log","create","obj","post","update"],"mappings":"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","sourcesContent":["import Response from \"../models/response\";\nimport axios from \"axios\";\n\n\nexport default class BaseService {\n    // private static baseURL: string = \"https://sal-react-demo-server.herokuapp.com/api\";\n\n    private static baseURL: string = \"http://localhost:3001/api\";\n\n\n    public static async getAll<T>(url: string): Promise<Response> {\n        let res = await axios.get<Array<T>>(this.baseURL + url)\n            .then((response: any) => {\n                const result = response.data;\n                if(result && result.success){\n                    return new Response(true, result.data  as Array<T>, \"Success\", \"\");\n                }else{\n                    const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text: \"Error\";\n                    return new Response(false, null, \"Error\", msg);\n                }\n              \n            })\n            .catch(function (error) {\n                return new Response(false, null, \"Error\", error);\n            });\n        return res;\n    }\n\n    public static get<T>(url: string, param: any): Promise<Response> {\n        let res = axios.get<T>(this.baseURL + url + param)\n            .then((response: any) => {\n                const result = response.data;\n                if(result && result.success){\n                    return new Response(true, result.data , \"Success\", \"\");\n                }else{\n                    const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text: \"Error\";\n                    return new Response(false, null, \"Error\", msg);\n                }\n            })\n            .catch(function (error) {\n                return new Response(false, null, \"Error\", error);\n            });\n        return res;\n    }\n    public static delete(url: string, param: any): Promise<Response> {\n        console.log(param);\n        \n        let res = axios.delete(this.baseURL + url , { data: param })\n            .then(response => { \n                const result = response.data;\n                if(result && result.success){\n                    return new Response(true, result.data , \"Success\", \"\");\n                }else{\n                    const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text: \"Error\";\n                    return new Response(false, null, \"Error\", msg);\n                }\n            })\n            .catch(function (error) {\n                return new Response(false, null, \"Error\", error);\n            });\n        return res;\n    }\n    public static create<T>(url: string, obj: T): Promise<Response> {\n\n        let res = axios.post(this.baseURL + url ,obj)\n            .then(response => {\n                const result = response.data;\n                if(result && result.success){\n                    return new Response(true, result.data , \"Success\", \"\");\n                }else{\n                    const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text: \"Error\";\n                    return new Response(false, null, \"Error\", msg);\n                }\n            })\n            .catch(function (error) {\n                return new Response(false, null, \"Error\", error);\n            });\n        return res;\n    }\n    public static update<T>(url: string, param: any, obj: T): Promise<Response> {\n\n        let res = axios.post(this.baseURL + url + param, obj)\n            .then(response => {\n                const result = response.data;\n                if(result && result.success){\n                    return new Response(true, result.data , \"Success\", \"\");\n                }else{\n                    const msg = (result.messageList && result.messageList.length > 0) ? result.messageList[0].text: \"Error\";\n                    return new Response(false, null, \"Error\", msg);\n                }\n            })\n            .catch(function (error) {\n                return new Response(false, null, \"Error\", error);;\n            });\n        return res;\n    }\n}"]},"metadata":{},"sourceType":"module"}