{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\junjie\\\\Documents\\\\GitHub\\\\queue-system\\\\frontend\\\\src\\\\components\\\\UpdateBooking.tsx\";\nimport React from 'react';\nimport * as toastr from 'toastr';\nimport Booking from '../models/booking';\nimport BaseService from '../service/base.service';\nimport { BookingPage } from './displayBookingForm';\nexport default class Edit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSave = () => {\n      console.log(this.state.booking);\n      BaseService.update(\"/booking/update/\", this.props.match.params.id, this.state.booking).then(rp => {\n        if (rp.Status) {\n          toastr.success('Booking saved.');\n          this.props.history.back();\n        } else {\n          toastr.error(rp.Messages);\n          console.log(\"Messages: \" + rp.Messages);\n          console.log(\"Exception: \" + rp.Exception);\n        }\n      });\n    };\n\n    this.state = {\n      booking: {\n        Nric: '',\n        CitizenName: '',\n        CitizenSalutation: '',\n        CitizenEmail: '',\n        CitizenNumber: '',\n        ServiceName: '',\n        ServiceProviderName: '',\n        ServiceProviderEmail: '',\n        ServiceProviderPhone: '',\n        ServiceStartDate: '',\n        ServiceStartTime: '',\n        ServiceProviderLocation: '',\n        // ServiceEndDateTime : '',\n        // BookingCreationDate : '',\n        // BookingLocation : '',\n        // BookingDescription : '',\n        // BookingReference : '',\n        BookingStatus: '',\n        // DynamicFields : '',\n        Id: ''\n      }\n    };\n    this.onFieldValueChange = this.onFieldValueChange.bind(this);\n  }\n\n  onFieldValueChange(fieldName, value) {\n    const nextState = { ...this.state,\n      booking: { ...this.state.booking,\n        [fieldName]: value\n      }\n    };\n    this.setState(nextState);\n  }\n\n  componentDidMount() {\n    BaseService.get('/booking/edit/', this.props.match.params.id).then(rp => {\n      if (rp.Status) {\n        const booking = rp.Data;\n        this.setState({\n          booking: new Booking(booking._id, booking.nric, booking.citizenName, booking.citizenSalutation, booking.citizenEmail, booking.citizenNumber, booking.serviceName, booking.serviceProviderName, booking.serviceProviderEmail, booking.serviceProviderPhone, booking.serviceStartDate, booking.serviceStartTime, booking.serviceProviderLocation, // booking.serviceEndDateTime, \n          // booking.bookingCreationDate,\n          // booking.bookingLocation, \n          // booking.bookingDescription, \n          // booking.bookingReference, \n          booking.bookingStatus // booking.dynamicFields \n          )\n        });\n      } else {\n        toastr.error(rp.Messages);\n        console.log(\"Messages: \" + rp.Messages);\n        console.log(\"Exception: \" + rp.Exception);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(BookingPage, {\n      booking: this.state.booking,\n      onChange: this.onFieldValueChange,\n      onSave: this.onSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/junjie/Documents/GitHub/queue-system/frontend/src/components/UpdateBooking.tsx"],"names":["React","toastr","Booking","BaseService","BookingPage","Edit","Component","constructor","props","onSave","console","log","state","booking","update","match","params","id","then","rp","Status","success","history","back","error","Messages","Exception","Nric","CitizenName","CitizenSalutation","CitizenEmail","CitizenNumber","ServiceName","ServiceProviderName","ServiceProviderEmail","ServiceProviderPhone","ServiceStartDate","ServiceStartTime","ServiceProviderLocation","BookingStatus","Id","onFieldValueChange","bind","fieldName","value","nextState","setState","componentDidMount","get","Data","_id","nric","citizenName","citizenSalutation","citizenEmail","citizenNumber","serviceName","serviceProviderName","serviceProviderEmail","serviceProviderPhone","serviceStartDate","serviceStartTime","serviceProviderLocation","bookingStatus","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as toastr from 'toastr';\r\nimport Booking from '../models/booking';\r\nimport BaseService from '../service/base.service';\r\nimport { History } from 'history';\r\nimport { BookingPage } from './displayBookingForm'; \r\n\r\n\r\ninterface IProps { \r\n    history: History;\r\n    //Map properties match\r\n    match:{ \r\n        isExact: boolean\r\n        params: {\r\n            id:string\r\n        },\r\n        path: string,\r\n        url: string,\r\n    }\r\n}\r\ninterface IState {\r\n    booking: Booking\r\n}\r\n\r\n\r\nexport default class Edit extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: IProps) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            booking: {\r\n  \r\n                Nric : '',\r\n                CitizenName : '',\r\n                CitizenSalutation : '',\r\n                CitizenEmail : '',\r\n                CitizenNumber : '',\r\n\r\n                ServiceName : '',\r\n                ServiceProviderName : '',\r\n                ServiceProviderEmail : '',\r\n                ServiceProviderPhone : '',\r\n                ServiceStartDate : '',\r\n                ServiceStartTime :'',\r\n                ServiceProviderLocation : '',\r\n                // ServiceEndDateTime : '',\r\n\r\n                // BookingCreationDate : '',\r\n                // BookingLocation : '',\r\n                // BookingDescription : '',\r\n                // BookingReference : '',\r\n                BookingStatus : '',\r\n\r\n                // DynamicFields : '',\r\n                Id: ''\r\n            }\r\n        }\r\n        this.onFieldValueChange = this.onFieldValueChange.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private onFieldValueChange(fieldName: string, value: string) { \r\n        const nextState = {\r\n            ...this.state,\r\n            booking: {\r\n                ...this.state.booking,\r\n                [fieldName]: value,\r\n            }\r\n        };\r\n\r\n        this.setState(nextState);\r\n    }\r\n\r\n    public componentDidMount() { \r\n        BaseService.get<Booking>('/booking/edit/', this.props.match.params.id).then(\r\n            (rp) => {\r\n                if (rp.Status) {\r\n                    const booking = rp.Data;\r\n                    this.setState({ booking: new Booking(\r\n                        booking._id, \r\n                        booking.nric,\r\n                        booking.citizenName, \r\n                        booking.citizenSalutation, \r\n                        booking.citizenEmail,\r\n                        booking.citizenNumber,\r\n\r\n                        booking.serviceName, \r\n                        booking.serviceProviderName, \r\n                        booking.serviceProviderEmail,\r\n                        booking.serviceProviderPhone,\r\n                        booking.serviceStartDate,\r\n                        booking.serviceStartTime, \r\n                        booking.serviceProviderLocation,\r\n                        // booking.serviceEndDateTime, \r\n\r\n                        // booking.bookingCreationDate,\r\n                        // booking.bookingLocation, \r\n                        // booking.bookingDescription, \r\n                        // booking.bookingReference, \r\n                        booking.bookingStatus\r\n                        // booking.dynamicFields \r\n                        \r\n                        )});\r\n                } else {\r\n                    toastr.error(rp.Messages);\r\n                    console.log(\"Messages: \" + rp.Messages);\r\n                    console.log(\"Exception: \" + rp.Exception);\r\n                }\r\n            }\r\n\r\n        );\r\n    }\r\n\r\n\r\n    private onSave = () => {\r\n\r\n        console.log(this.state.booking);\r\n        BaseService.update<Booking>(\"/booking/update/\", this.props.match.params.id,this.state.booking).then(\r\n            (rp) => {\r\n                if (rp.Status) {\r\n                    toastr.success('Booking saved.');\r\n                    this.props.history.back();\r\n                } else {\r\n                    toastr.error(rp.Messages);\r\n                    console.log(\"Messages: \" + rp.Messages);\r\n                    console.log(\"Exception: \" + rp.Exception);\r\n                }\r\n            }\r\n        );\r\n\r\n    }\r\n \r\n    render() {\r\n        return (\r\n            <BookingPage\r\n                booking={this.state.booking}\r\n                onChange={this.onFieldValueChange}\r\n                onSave={this.onSave}\r\n            />\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}